" Note: Skip initialization for vim-tiny or vim-small.
if !1 | finish | endif

set nocompatible
set encoding=utf8
set fileformat=unix
set modelines=0
set autoindent
set showcmd
set hidden
set visualbell
set ttyfast
set ruler
set backspace=indent,eol,start
set number
set laststatus=2
set history=1000
set undoreload=10000
set shell=zsh
set lazyredraw
set matchtime=3
set showbreak=↪
set splitbelow
set splitright
set fillchars=diff:⣿,vert:│
set autowrite
set autoread
set shiftround
set title
set linebreak
set cursorline
set tabpagemax=50
set noshowmode
let mapleader = ","
set termguicolors

" Live preview substitutions
set inccommand=split

"Better line wrapping
set wrap
set textwidth=100
set formatoptions=qrn1
" Column highlight
let &colorcolumn="80,100,".join(range(120,999),",")

set ttimeout
set ttimeoutlen=50

" Remember vim status on close
set viminfo='100,<1000,s100,%,:5

" scrolling
set scrolloff=3
set sidescroll=1
set sidescrolloff=10

"Set font type and size. Depends on the resolution. Larger screens, prefer h20
set guifont=Inconsolata\ for\ Powerline\ Nerd\ Font\ Complete:h16
if exists('g:vv')
    VVset fontfamily=InconsolataForPowerline\ Nerd\ Font
    VVset fontsize=16
    VVset windowheight=100%
    VVset windowwidth=100%
    VVset windowleft=0
    VVset windowtop=0

endif

" Better Completion
set completeopt=longest,menuone,preview

" Resize splits when the window is resized
au VimResized * :wincmd =
"
" tabs and spaces
set expandtab
set smarttab
set tabstop=8
set softtabstop=4
set shiftwidth=4
au BufNewFile,BufReadPost *.css,*.html,*.mako,*.rb,*.erb,*.coffee,*.js,*.json set shiftwidth=2

" other visuals
set wildmenu
set wildmode=list:longest
set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX bullshit
set wildignore+=migrations                       " Django migrations
set wildignore+=*.pyc                            " Python byte code
set wildignore+=*.orig                           " Merge resolution files

" search
set ignorecase
set smartcase
set showmatch
set hlsearch

" Press Space to turn off highlighting and clear any message already displayed.
:nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>

" set cwd to the current file
nnoremap <leader>cd :cd %:p:h<CR>:pwd<CR>

" Spellcheck with vim (set spell / set nospell)
set dictionary=/usr/share/dict/words
set spellfile=~/.vim/custom-dictionary.utf-8.add
syn spell toplevel

" Automatically reload vimrc
autocmd! bufwritepost vimrc source ~/.config/nvim/vimrc

" Other mappings
nnoremap Y y$

" Backups
set undodir=~/.config/nvim/tmp/undo//     " undo files
set backupdir=~/.config/nvim/tmp/backup// " backups
set directory=~/.config/nvim/tmp/swap//   " swap files
set undofile
set backup                        " enable backups
set noswapfile                    " It's 2012, Vim.

" Use the below highlight group when displaying bad whitespace is desired
highlight BadWhitespace ctermbg=red guibg=red

" folds
set nofoldenable 

" shortcuts and abbreviations
abbreviate pdbst import pdb;pdb.set_trace()
abbreviate lorem Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
" Remove whitespace on lines end
nnoremap <leader>w :%s/\s\+$//<cr>:let @/=''<CR>
"
" Toggle [i]nvisible characters
nnoremap <leader>i :set list!<cr>
set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮

" Emacs bindings in command line mode
cnoremap <c-a> <home>
cnoremap <c-e> <end>

if has('gui_running')

    " Remove all the UI cruft
    set go-=T
    set go-=l
    set go-=L
    set go-=r
    set go-=R
    set so=7

    " only blink the cursor on input mode
    set guicursor=n-v-c:blinkon0
    set guicursor+=i:blinkwait10

    if has("gui_macvim")
        " Full screen means FULL screen
        set fuoptions=maxvert,maxhorz

        map <D-Return> :set invfu<CR>

        " Use the normal HIG movements, except for M-Up/Down
        let macvim_skip_cmd_opt_movement = 1
        no   <D-Left>       <Home>
        no!  <D-Left>       <Home>
        no   <M-Left>       <C-Left>
        no!  <M-Left>       <C-Left>

        no   <D-Right>      <End>
        no!  <D-Right>      <End>
        no   <M-Right>      <C-Right>
        no!  <M-Right>      <C-Right>

        no   <D-Up>         <C-Home>
        ino  <D-Up>         <C-Home>
        imap <M-Up>         <C-o>{

        no   <D-Down>       <C-End>
        ino  <D-Down>       <C-End>
        imap <M-Down>       <C-o>}

        imap <M-BS>         <C-w>
        inoremap <D-BS>     <esc>my0c`y
    else
        " Non-MacVim GUI, like Gvim
    end
else
    " Console Vim
    " For me, this means iTerm2, possibly through tmux
    " Mouse support
    set mouse=a
endif

" Use Node.js for JavaScript interpretation
let $JS_CMD='node'

call plug#begin('~/.vim/plugged')

Plug 'Shougo/vimproc.vim', {
\ 'build' : {
\     'windows' : 'tools\\update-dll-mingw',
\     'cygwin' : 'make -f make_cygwin.mak',
\     'mac' : 'make -f make_mac.mak',
\     'linux' : 'make',
\     'unix' : 'gmake',
\    },
\ }
Plug 'iCyMind/NeoSolarized'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'mhinz/vim-signify'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'mbbill/undotree'
Plug 'majutsushi/tagbar'
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'myusuf3/numbers.vim'
Plug 'tristen/vim-sparkup'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-fugitive'
Plug 'junegunn/gv.vim'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-git'
Plug 'tpope/vim-haml'
Plug 'tpope/vim-markdown'
Plug 'avakhov/vim-yaml'
Plug 'JamshedVesuna/vim-markdown-preview'
Plug 'sophacles/vim-bundle-mako'
Plug 'rizzatti/funcoo.vim'
Plug 'brooth/far.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'chrisbra/NrrwRgn'
Plug 'Lokaltog/vim-easymotion'
Plug 'maxbrunsfeld/vim-yankstack'
Plug 'godlygeek/tabular'
Plug 'tommcdo/vim-exchange'
Plug 'sickill/vim-pasta'
Plug 'tmux-plugins/vim-tmux'
Plug 'christoomey/vim-tmux-navigator'
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'roxma/vim-tmux-clipboard'
Plug 'regedarek/ZoomWin'
" Use release branch
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'hynek/vim-python-pep8-indent'
Plug 'okcompute/vim-python-motions'
Plug 'tmhedberg/SimpylFold'
Plug 'bronson/vim-trailing-whitespace'
Plug 'benmills/vimux'
Plug 'pbrisbin/vim-mkdir'
Plug 'ianks/vim-tsx'
Plug 'ryanoasis/vim-devicons'
Plug 'leafgarland/typescript-vim'
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'mhinz/vim-startify'
Plug 'cyansprite/Extract'
Plug 'machakann/vim-highlightedyank'
Plug 'janko-m/vim-test'
Plug 'haya14busa/incsearch.vim'
Plug 'haya14busa/incsearch-easymotion.vim'
Plug 'ekalinin/Dockerfile.vim'
Plug 'tpope/vim-speeddating'
Plug 'myusuf3/numbers.vim'
Plug 'lilydjwg/colorizer'
Plug 'sbdchd/neoformat'
Plug 'junegunn/vim-peekaboo'
Plug 'michaeljsmith/vim-indent-object'
Plug 'alvan/vim-closetag'
Plug 'Yggdroot/indentLine'

" Coc config
let g:coc_global_extensions = ['coc-tslint-plugin', 'coc-tsserver', 'coc-emmet', 'coc-css', 'coc-html', 'coc-json', 'coc-yank', 'coc-prettier', 'coc-python']
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"


" vim-test strategy
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>a :TestSuite<CR>
nmap <silent> <leader>l :TestLast<CR>
nmap <silent> <leader>g :TestVisit<CR>

map / <Plug>(incsearch-easymotion-/)
map ? <Plug>(incsearch-easymotion-?)

" don't use tabs for snippets
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-n>"

let g:deoplete#enable_at_startup = 1
let g:deoplete#sources#jedi#show_docstring = 1
if has("mac")
    Plug 'rizzatti/dash.vim'
    if !has('nvim')
        set macmeta
    endif
endif
call plug#end()

filetype plugin indent on " Keep below neobundle#end!!!

" Indent guides
" let g:indent_guides_enable_on_vim_startup = 0
" let g:indent_guides_color_change_percent = 2
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_auto_colors = 0
" autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=base03
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=black

" Airline
let g:airline_powerline_fonts=1
let g:airline_theme='solarized'
let g:airline_exclude_filenames = ['DebuggerWatch', 'DebuggerStack', 'DebuggerStatus']
let g:airline_extensions = ['branch', 'hunks', 'coc', 'tabline']
let g:airline#extensions#tabline#buffer_min_count = 2
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:bufferline_echo=0
let airline#extensions#coc#stl_format_err = '%E{[%e(#%fe)]}'
let airline#extensions#coc#stl_format_warn = '%W{[%w(#%fw)]}'
" Configure error/warning section to use coc.nvim
let g:airline_section_error = '%{airline#util#wrap(airline#extensions#coc#get_error(),0)}'
let g:airline_section_warning = '%{airline#util#wrap(airline#extensions#coc#get_warning(),0)}'

" Jedi
let g:jedi#use_splits_not_buffers = "left"
let g:jedi#popup_on_dot = 0

" close preview window (used for docs) once insert is done
autocmd InsertLeave * :pc

" tagbar config
let g:tagbar_autoshowtag = 1

let g:python_host_prog = '/Users/santiagosuarezordonez/.pyenv/versions/neovim2/bin/python'
let test#strategy = "neovim"
" Point YCM to the Pipenv created virtualenv, if possible
" At first, get the output of 'pipenv --venv' command.
let pipenv_venv_path = system('pipenv --venv')
" The above system() call produces a non zero exit code whenever
" a proper virtual environment has not been found.
" So, second, we only point YCM to the virtual environment when
" the call to 'pipenv --venv' was successful.
" Remember, that 'pipenv --venv' only points to the root directory
" of the virtual environment, so we have to append a full path to
" the python executable.
if v:shell_error == 0
  let venv_path = substitute(pipenv_venv_path, '\n', '', '')
  let g:python3_host_prog = venv_path . '/bin/python'
  let test#python#pytest#executable = venv_path . '/bin/pytest'
else
  let g:python_host_prog = '/Users/santiagosuarezordonez/.pyenv/versions/neovim2/bin/python'
  let g:python3_host_prog = '/Users/santiagosuarezordonez/.pyenv/versions/neovim3/bin/python'
endif

" fzf.vim bind
nnoremap <C-p> :GFiles<cr>
nmap <silent> <leader>fg :GFiles<cr>
nmap <silent> <leader>ff :Files<cr>
nmap <silent> <leader>fh :History<cr>
nmap <silent> <leader>fb :Buffers<CR>
nmap <silent> <leader>fc :Commits<CR>

" Dash
nmap <silent> <leader>d <Plug>DashSearch

" === coc.nvim === "
nmap <silent> <leader>dd <Plug>(coc-definition)
nmap <silent> <leader>dr <Plug>(coc-references)
nmap <silent> <leader>dj <Plug>(coc-implementation)

" Nerdtree
nmap <silent> <leader>n :NERDTreeToggle<CR>
nmap <leader>nf :NERDTreeFind<CR>
" auto-open nerdtree if no files were given on start
autocmd vimenter * if !argc() | Startify | NERDTreeToggle | wincmd w | endif
" auto-close tab if nerdtree is hte only buffer left
autocmd bufenter * if (winnr('$') == 1 && exists('b:NERDTreeType') && b:NERDTreeType == 'primary') | q | endif
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let NERDTreeQuitOnOpen = 1


" "
"Color scheme
syntax enable
set background=dark
colorscheme NeoSolarized

" Undotree window
nnoremap <leader>u :UndotreeToggle<CR>
" Tagbar window
nnoremap <leader>tb :TagbarToggle<CR>
" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif
" bind K to grep word under cursor
nnoremap <silent> <leader>ag :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
" bind \ (backward slash) to grep shortcut
" command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!

map <Leader>s <Plug>(easymotion-s2)

" Turn on case sensitive feature
let g:EasyMotion_smartcase = 1

" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <Leader>l <Plug>(easymotion-l)
map <Leader>h <Plug>(easymotion-h)

" nmap <unique> <c-w>z  <Plug>ZoomWin
"
" Markdown preview
let vim_markdown_preview_hotkey='<C-m>'
let vim_markdown_preview_github=1
let g:virtualenv_auto_activate=1

" Ultisnips
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<leader>b"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

abbreviate BD /Users/santiagosuarezordonez/Projects/Blameless
