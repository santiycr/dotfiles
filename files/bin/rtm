#! /usr/bin/env python

VERSION = "1.2.0"

# LICENSE
# ======================================================================
# REMEMBER THE MILK COMMAND LINE INTERFACE (RTM-CLI)
# Copyright (C) 2011 David Waring
# Email: dave@davidwaring.net
#
# ----------------------------------------------------------------------
#
# This program is a command line interface for Remember the Milk
# See ./rtm --help for more information
#
# ----------------------------------------------------------------------
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# This program is in no way endorsed by or affiliated with Remember the Milk (TM)



# TODO:
# Improve suport for repeating tasks
#     - possibly display the last two most recent occurences of the recurring task
# add filter / smart lists to create list
# add estimate support
# add location support
# incoporate Google Calendar?  --> Usung Google's CLI




# DISPLAY DEFAULTS
PLAIN = 0                   # print tasks in plain mode (=1) or color mode (=0)
DISP_TAGS = 1               # print tasks with (=1) or without (=0) tags
DISP_NOTES = 1              # print tasks with (=1) or without (=0) note indicators
DISP_COMP = 0               # print tasks with (=1) or without (=0) completed tasks
DISP_STATUS = 1             # print status messages (=1)



# COLOR CODES:
# Use the following ANSI display attributes to set the colors for the various properties
#
#                           Foreground Colors
# 0 Reset all attributes    30 Black
# 1 Bright                  31 Red
# 2 Dim                     32 Green
# 4 Underscore              33 Yellow
# 5 Blink                   34 Blue
# 7 Reverse                 35 Magenta
# 8 Hidden                  36 Cyan
#                           37 White

COLOR_PRI1 = "\033[1;31m"
COLOR_PRI2 = "\033[1;34m"
COLOR_PRI3 = "\033[1;36m"
COLOR_DUE = "\033[1;32m"
COLOR_TAG = "\033[0;35m"
COLOR_RESET = "\033[0;m"




# IMPORT STATEMENTS
import rtm
import sys
import os
import getopt
from datetime import datetime
from datetime import date
from datetime import timedelta
from datetime import tzinfo
from operator import itemgetter
import string
import urllib2
import webbrowser



# VARIABLES:
# IF YOU ARE PLANNING ON MAKING DRASTIC CHANGES OR USING THIS SCRIPT AS THE BASIS FOR ANOTHER PROGRAM,
# PLEASE OBTAIN A NEW API KEY & SECRET FROM REMEMBER THE MILK
api_key = "cbc76268b901ccb8d9fc5f3aebc4ee1f"    # The RTM API Key
api_secret = "131beea786379309"                 # The RTM API Shared Secret
lookup_table = {}                               # An index of all tasks based on their id
lists = {}                                      # An index of list names based on their id
tasks = []                                      # A nested list of tasks containing their properties
PLANNER_LENGTH = 20                             # The max length of task names displayed by the weekly planner
MODE = ""                                       # The mode the script is currently running as
weekdays = ["Mon","Tue","Wed","Thu","Fri","Sat","Sun"]

# TIMEZONE CLASSES:
# Dealing with timezone differences between RTM (UTC) and local machine
# Code from example under http://docs.python.org/library/datetime.html#tzinfo-objects

ZERO = timedelta(0)
HOUR = timedelta(hours=1)

# A UTC class.

class UTC(tzinfo):
    """UTC"""

    def utcoffset(self, dt):
        return ZERO

    def tzname(self, dt):
        return "UTC"

    def dst(self, dt):
        return ZERO

utc = UTC()

# A class capturing the platform's idea of local time.

import time as _time

STDOFFSET = timedelta(seconds = -_time.timezone)
if _time.daylight:
    DSTOFFSET = timedelta(seconds = -_time.altzone)
else:
    DSTOFFSET = STDOFFSET

DSTDIFF = DSTOFFSET - STDOFFSET

class LocalTimezone(tzinfo):

    def utcoffset(self, dt):
        if self._isdst(dt):
            return DSTOFFSET
        else:
            return STDOFFSET

    def dst(self, dt):
        if self._isdst(dt):
            return DSTDIFF
        else:
            return ZERO

    def tzname(self, dt):
        return _time.tzname[self._isdst(dt)]

    def _isdst(self, dt):
        tt = (dt.year, dt.month, dt.day,
              dt.hour, dt.minute, dt.second,
              dt.weekday(), 0, 0)
        stamp = _time.mktime(tt)
        tt = _time.localtime(stamp)
        return tt.tm_isdst > 0

Local = LocalTimezone()



# ========================================================================================================= #
# Login                                                                                                     #
#    Login in to Remember the Milk and get a frob and authentication token                                  #
#    GLOBAL my_rtm: an authenticated remember the milk object                                               #
#    RETURN: username - the name of the logged in user                                                      #
# ========================================================================================================= #
def login():

    status("Authenticating... |=     |")
    # TEST NETWORK CONNECTION

    # try to connect to the RTM API server
    try:
        test = urllib2.urlopen("http://api.rememberthemilk.com/services/rest/")

    # when no internet connection is available...
    except urllib2.URLError:
        print "ERROR: Cannot connect to RTM server."
        sys.exit(1)

    # if a redirect occurs...
    if test.geturl() != "http://api.rememberthemilk.com/services/rest/":
        print "ERROR: Cannot connect to RTM server."
        sys.exit(1)

    status("Authenticating... |==    |")
    # CHECK FOR A CACHED TOKEN
    reauth = "true"
    try:
        full_dir = os.path.expanduser(os.path.join("~", ".rtm", api_key))
        full_path = os.path.expanduser(os.path.join(full_dir, "token"))
        try:
            os.makedirs(full_dir)
        except OSError:
            pass
        f = file(full_path, "r")
        token = f.read()
        f.close()

        # Check cached token:
        status("Authenticating... |===   |")
        rtm_check = rtm.createRTM(api_key, api_secret, token)
        status("Authenticating... |====  |")
        try:
            rsp = rtm_check.test.login()
            reauth = "false"
        except rtm.RTMAPIError:
            reauth = "true"

    except IOError:
        status("Authenticating... |====  |")
    	reauth = "true"

    status("Authenticating... |===== |")
    # IF THE TOKEN CACHE IS NOT FOUND...
    if reauth == "true":

		# AUTHENTICATE THE USER WITH RTM

		# create a temporary rtm object to get authURL
		rtm_init = rtm.createRTM(api_key, api_secret, "null")
		auth_url = rtm_init.getAuthURL()

		# Prompt and pause when we need to get a new token
		webbrowser.open(auth_url, True, True)
		print "This program requires access to your RTM account"
		raw_input("Press ENTER after you have authorized this program")

		# Get the authorized token
		token = rtm_init.getToken()

		# SAVE TOKEN TO DISK
		full_dir = os.path.expanduser(os.path.join("~", ".rtm", api_key))
		full_path = os.path.expanduser(os.path.join(full_dir, "token"))
		try:
			os.makedirs(full_dir)
		except OSError:
			pass
		f = file(full_path, "w")
		f.write(token)
		f.close()


    status("Authenticating... |===== |")
    # CREATE THE FINAL AUTHENTICATED GLOBAL RTM OBJECT
    global my_rtm
    my_rtm = rtm.createRTM(api_key, api_secret, token)
    status("Authenticating... |======|")

    try:
        rsp = my_rtm.test.login()
        status(None)
        return rsp.user.username
    except rtm.RTMAPIError:
        status(None)
    	print "ERROR! Could not properly authenticate with RTM"
    	return "null"

# END login()
# ========================================================================================================= #



# ========================================================================================================= #
# Logout                                                                                                    #
#    Remove login credentials used by this program                                                          #
# ========================================================================================================= #
def logout():

    print "logging out..."

    # get the path to the rtm settings
    full_path = os.path.expanduser(os.path.join("~", ".rtm"))

    # remove the directory containing rtm settings
    import shutil
    shutil.rmtree(full_path)

    sys.exit(0)

# END logout()
# ========================================================================================================= #



# ========================================================================================================= #
# getTimeline                                                                                               #
#    this method will load the timeline id saved to disk, if present.  If not present, a new one will be    #
#      requested from RTM.                                                                                  #
#    RETURN timeline: the timeline id to be used in rtm methods                                             #
# ========================================================================================================= #
def getTimeline():

    # filename to keep Timeline ID
    filename = "timeline"

    # Generate path to keep the Timeline ID
    full_path = os.path.expanduser(os.path.join("~", ".rtm", api_key, filename))

    # attempt to read the timeline from disk, if there
    try:
        f = file(full_path, "r")
        timeline = f.read()
        f.close()
        return timeline.strip()

    # if no file is found...
    except IOError:
        # get a timeline
        rsp = my_rtm.timelines.create()
        timeline = rsp.timeline

        # write it to disk
        f = file(full_path, "w")
        print >>f, timeline
        f.close()

        # return the newly minted timeline id
        return timeline

# END getTimeline()
# ========================================================================================================= #



# ========================================================================================================= #
# getTransID                                                                                                #
#    this method will read the transaction ID(s) stored to disk, if present                                 #
#    RETURN a list of transIDs (return empty list when no trans ID is found)                                #
# ========================================================================================================= #
def getTransID():

    # filename to keep the transaction ID
    filename = "transID"
    transIDs = []

    # Generate path to keep the transaction ID
    full_path = os.path.expanduser(os.path.join("~", ".rtm", api_key, filename))

    # read transaction ID from disk
    try:
        f = file(full_path, "r")
        transIDs = f.readlines()
        f.close()

        for i in range(len(transIDs)):
            transIDs[i] = transIDs[i].strip()

    except IOError:
        transIDs = []

    # return the transaction ID
    return transIDs

# END getTransID()
# ========================================================================================================= #



# ========================================================================================================= #
# writeTransID <transaction ID>                                                                             #
#    this method will write the specified transaction ID to disk    (currently replacing the past one)      #
# ========================================================================================================= #
def writeTransID(transID, multi=""):

    # filename to keep the transaction ID
    filename = "transID"

    # Generate path to keep the transaction ID
    full_path = os.path.expanduser(os.path.join("~", ".rtm", api_key, filename))

    # clear old transIDs if "startMulti" flag is sent
    if transID == "startMulti":
        f = file(full_path, "w")
        f.close()

    else:

        # if multi, append new trans id to end of file
        if multi == "true":
            f = file(full_path, "a")
            f.write(transID+"\n")
            f.close()

        # otherwise, write the trans id to file (replacing old one)
        else:
            f = file(full_path, "w")
            f.write(transID+"\n")
            f.close()

# END writeTransID()
# ========================================================================================================= #



# ========================================================================================================= #
# genLookupTable                                                                                            #
#    this method will generate a lookup table in order to give an index value to all tasks.  The tasks'     #
#    id will be used to uniquely identify each task                                                         #
#    GLOBAL lookup_table={} : the dictionary used as the index                                              #
# ========================================================================================================= #
def genLookupTable():

    # request the tasks from rtm (grouped by list)
    tasks_by_list_t = my_rtm.tasks.getList()
    tasks_by_list = tasks_by_list_t.tasks

    # dictionary lookup table and key
    global lookup_table
    n = 1

    # for each list...
    for lists in tasks_by_list.list:

        if hasattr(lists, "taskseries"):

            # when there are multiple taskseries in a list...
            if isinstance(lists.taskseries, list):

            	# cycle through each taskseries in the list...
            	for series in lists.taskseries:

            		# when there are multiple tasks in a taskseries (recurring tasks)...
            		if isinstance(series.task, list):
            			for idx in range(0, len(series.task)):
            			    lookup_table[n] = series.task[idx].id
            			    n=n+1

            		# when there is only 1 task in a taskseries...
            		else:
	            		lookup_table[n] = series.task.id
    	        		n=n+1


            # when there is only 1 taskseries in a list...
            else:

            	series = lists.taskseries

            	# when there are multiple tasks in a taskseries (recurring tasks)...
            	if isinstance(series.task, list):
            		for idx in range(0, len(series.task)):
            		    lookup_table[n] = series.task[idx].id
            		    n=n+1

            	# when there is only 1 task in a taskseries...
            	else:
        			lookup_table[n] = series.task.id
        			n=n+1

# END genLookupTable()
# ========================================================================================================= #



# ========================================================================================================= #
# getLookupTable() <index> or <task id>                                                                     #
#    this method will return the task's id when given an index, or the index when given the task id.        #
#    RETURN <task id> or <index>                                                                            #
# ========================================================================================================= #
def getLookupTable(index="", id=""):

    # genereate the lookup table, if necessary
    global lookup_table
    if lookup_table == {}:
        genLookupTable()

    # return the task id, given the index number
    if index != "":
        return lookup_table[int(index)]

    # return the index number, given the task id
    elif id != "":
        for i in range(len(lookup_table)):
            if lookup_table[i+1] == id:
                return i+1

# END getLookupTable()
# ========================================================================================================= #



# ========================================================================================================= #
# getList <id> or <name>                                                                                    #
#    this method will lookup a given list id number and it's associated name                                #
#    RETURN either the list name (given its id) or the list id (given its name)                             #
# ========================================================================================================= #
def getList(id="", name=""):

    # CREATE A DICTIONARY OF LIST ID's AND LIST NAMES
    global lists


    # if lists is empty, request data from RTM
    if len(lists) == 0:

        # create a list of the rtm list elements
        lists_elem_t = my_rtm.lists.getList()
        lists_elem = lists_elem_t.lists.list

        # create a dictionary using the id as keys with the names
        for l in lists_elem:
            lists[l.id] = l.name


    # return the list name, when given the id
    if id != "":
        return lists[id]

    # return the id, when given the name
    elif name != "":
        for iter_id, iter_name in lists.iteritems():
            if iter_name == name:
                return iter_id

    # list not found...
    print "ERROR: List " + id + name + " not found"
    sys.exit(2)


# END getList()
# ========================================================================================================= #



# ========================================================================================================= #
# getTasks                                                                                                  #
#    Generate a nested list of all of the RTM tasks including the follow properties for each task:          #
#        - Taskseries ID    = taskseries_id      [*][0]                                                     #
#        - Task ID          = task_id            [*][1]                                                     #
#        - Task Name        = task_name          [*][2]                                                     #
#        - Task Priority    = task_pri           [*][3]                                                     #
#        - Task Due Date    = task_due           [*][4]                                                     #
#        - List Name        = list_name          [*][5]                                                     #
#        - List ID          = list_id            [*][6]                                                     #
#        - Complete Date    = task_comp          [*][7]                                                     #
#        - Tags             = tags[]             [*][8][#]                                                  #
#        - Number of Notes  = notes_num          [*][9]                                                     #
#    GLOBAL tasks[]: a nested list of all tasks and their properties                                        #
# ========================================================================================================= #
def getTasks(filterString=""):

    # CREATE A 2D ARRAY OF TASKS WITH THEIR PROPERTIES:
    global tasks
    tasks = []

    # get the root of the task element tree
    root = my_rtm.tasks.getList(filter=filterString)

    if hasattr(root.tasks, "list"):

		# cycle through each task series and gather all required data
		for lists in root.tasks.list:

			if hasattr(lists, "taskseries"):

				# When there are multiples taskseries in the list...
				if isinstance(lists.taskseries, list):

					# cycle through each task in the current list...
					for series in lists.taskseries:
						task = series.task


						# TASKSERIES PROPERTIES

						taskseries_id = series.id
						task_name = series.name

						if series.tags == []:
							tags = []
						else:
							if (type(series.tags.tag) == unicode or type(series.tags.tag) == type(str())):
								tags = [series.tags.tag]
							else:
								tags = series.tags.tag

						if series.notes == []:
							notes_num = 0
						else:
							if isinstance(series.notes.note, list):
								notes_num = len(series.notes.note)
							else:
								notes_num = 1


						# TASK PROPERTIES

						# if there is more than one task in the taskseries (recurring tasks)...
						if isinstance(task, list):
							idx = 0
							task_id = task[idx].id
							task_pri = task[idx].priority
							task_due = task[idx].due
							task_comp = task[idx].completed

						# when there is only one task in the taskseries...
						else:
							task_id = task.id
							task_pri = task.priority
							task_due = task.due
							task_comp = task.completed


						# LIST PROPERTIES

						list_id = lists.id
						list_name = getList(id=list_id)


						# Add task properties to the nested list
						tasks.append([taskseries_id, task_id, task_name, task_pri, task_due, list_name, list_id, task_comp, tags, notes_num])



				# When there is only one taskseries in the list
				else:
					series = lists.taskseries
					task = series.task


					# TASKSERIES PROPERTIES

					taskseries_id = series.id
					task_name = series.name

					if series.tags == []:
						tags = []
					else:
						if (type(series.tags.tag) == unicode or type(series.tags.tag) == type(str())):
							tags = [series.tags.tag]
						else:
							tags = series.tags.tag

					if series.notes == []:
						notes_num = 0
					else:
						if isinstance(series.notes.note, list):
							notes_num = len(series.notes.note)
						else:
							notes_num = 1


					# TASK PROPERTIES

					# if there is more than one task in the taskseries (recurring tasks)...
					if isinstance(task, list):
						idx = 0
						task_id = task[idx].id
						task_pri = task[idx].priority
						task_due = task[idx].due
						task_comp = task[idx].completed

					# when there is only one task in the taskseries...
					else:
						task_id = task.id
						task_pri = task.priority
						task_due = task.due
						task_comp = task.completed


					# LIST PROPERTIES

					list_id = lists.id
					list_name = getList(id=list_id)


					# Add task properties to the nested list
					tasks.append([taskseries_id, task_id, task_name, task_pri, task_due, list_name, list_id, task_comp, tags, notes_num])


			# When there are no taskseries in the current list...
			else:
				pass


# END getTasks()
# ========================================================================================================= #



# ========================================================================================================= #
# getTask <index>                                                                                           #
#   this method will return task properties: taskseries id, task id, and list id for a specified task index #
#   RETURN (task id, taskseries id, list id) as strings                                                     #
# ========================================================================================================= #
def getTask(index):

    # get task details: task id, taskseries id, list id

    # use the lookuptable to get the task id
    task_id = getLookupTable(index=index)

    # load all tasks to find the one we need
    # TODO: this takes too long...find a way to load fewer tasks (or better yet, just the one we need)
    getTasks()

    # search through the tasks looking for our task id
    for i in range(len(tasks)):

        # when we find our task id, save its taskseries id and list id
        if tasks[i][1] == task_id:
            taskseries_id = tasks[i][0]
            list_id = tasks[i][6]

    # return our findings
    return (task_id, taskseries_id, list_id)

# END getTask()
# ========================================================================================================= #



# ========================================================================================================= #
# ls <filter>                                                                                               #
#   Print a list of all of the tasks sorted first by list, then completed, pri, due date, and then task     #
#   name.  The task    list can be optionally filtered by RTM's built-in search filters.                    #
# ========================================================================================================= #
def ls(filterString=""):

    # login to RTM and authenticate the user
    if MODE != "interactive":
        login()

    # filter out completed tasks, if requested
    if DISP_COMP == 0:
        filterString = filterString + " status:incomplete"

    # get the tasks
    getTasks(filterString=filterString)

    # sort tasks by task list, then completed, priority, due date, and task name
    global tasks
    tasks = sorted(tasks, key=itemgetter(5,7,3,4,2))

    # initial list heading
    current_list_name = ""

    # cycle through each task item
    for i in range(len(tasks)):

        # if the task item is in a new list...print the new list name
        if tasks[i][5] != current_list_name:
            current_list_name = tasks[i][5]
            print ""
            print "  " + current_list_name + ":"

        # print task index value, padded with zeros (depending on # of tasks)
        if len(tasks) < 100:
            print "%02d" % getLookupTable(id=tasks[i][1]),
        elif len(tasks) < 1000:
            print "%03d" % getLookupTable(id=tasks[i][1]),
        elif len(tasks) < 10000:
            print "%04d" % getLookupTable(id=tasks[i][1]),
        else:
            print "%02d" % getLookupTable(id=tasks[i][1]),

        # if task is completed...
        if tasks[i][7] != "":

            # print an 'x' instead of priority
            print (" x  " + tasks[i][2]).encode("utf-8"),

            # print any notes indicators, if requested
            if DISP_NOTES == 1:
                for j in range(tasks[i][9]):
                   print "*",

            # print the tags, if any
            if (len(tasks[i][8]) != 0) and (DISP_TAGS == 1):
                for j in range(len(tasks[i][8])):
                   print "#" + tasks[i][8][j],

            # get the completed date as a string
            date = str(tasks[i][7])

            # convert the date into a datetime object
            date = datetime.strptime(date, "%Y-%m-%dT%H:%M:%SZ").replace(tzinfo=utc).astimezone(Local)

            # print the completed date
            print "x " + weekdays[date.weekday()] + " " + str(date)[5:10]

        # for incomplete tasks...
        else:

            # print the priority, if present, and the task in color, if desired
            if tasks[i][3] != "N":

                # for plain output..
                if PLAIN == 1:
                   print ("(" + tasks[i][3] + ") " + tasks[i][2]).encode("utf-8"),

                # for colored output...
                else:
                    if tasks[i][3] == "1":
                        print (COLOR_PRI1 + '(' + tasks[i][3] + ') ' + tasks[i][2]).encode("utf-8"),
                    elif tasks[i][3] == "2":
                        print (COLOR_PRI2 + '(' + tasks[i][3] + ') ' + tasks[i][2]).encode("utf-8"),
                    elif tasks[i][3] == "3":
                        print (COLOR_PRI3 + '(' + tasks[i][3] + ') ' + tasks[i][2]).encode("utf-8"),

            # indent non-prioritized tasks further
            else:
                print ("    " + tasks[i][2]).encode("utf-8"),


            # print notes indicator, if requested
            if DISP_NOTES == 1:
                for j in range(tasks[i][9]):
                    print "*",

            if PLAIN == 0:
                print COLOR_RESET,


            # print the tags, if any
            if (len(tasks[i][8]) != 0) and (DISP_TAGS == 1):

                # for plain output...
                if PLAIN == 1:
                    for j in range(len(tasks[i][8])):
                        print "#" + tasks[i][8][j],

                # for colored output...
                else:
                    print COLOR_TAG,
                    for j in range(len(tasks[i][8])):
                       print "#" + tasks[i][8][j],
                    print COLOR_RESET,


            # print the due date, if it has one and in color, if desired
            if tasks[i][4] != "":

                # get the due date as a string
                date = str(tasks[i][4])

                # convert the date into a datetime object
                date = datetime.strptime(date, "%Y-%m-%dT%H:%M:%SZ").replace(tzinfo=utc).astimezone(Local)

                # for plain output...
                if PLAIN == 1:
                    print "| " + weekdays[date.weekday()] + " " + str(date)[5:10],

                # for colored output...
                else:
                   print COLOR_DUE + '| ' + weekdays[date.weekday()] + " " + str(date)[5:10] + COLOR_RESET,

            # print new line
            print ""

    print ""

# END ls()
# ========================================================================================================= #



# ========================================================================================================= #
# lsp <filter>                                                                                              #
#   Print a list of all of the tasks sorted first by completed, then priority, task list, due date and      #
#   then by task name.  The task list can be optionally filtered using RTM's built-in search filters.       #
# ========================================================================================================= #
def lsp(filterString=""):

    # login to RTM and authenticate the user
    if MODE != "interactive":
        login()

    # filter out completed tasks, if requested
    if DISP_COMP == 0:
        filterString = filterString + " status:incomplete"

    # get the tasks
    getTasks(filterString=filterString)

    # sort tasks by completion, priority, task list, due date, then by task name
    global tasks
    tasks = sorted(tasks, key=itemgetter(7,3,5,4,2))

    # parse through each task
    for i in range(len(tasks)):

        # print task index value, padded with zeros (depending on # of tasks)
        if len(tasks) < 100:
            print "%02d" % getLookupTable(id=tasks[i][1]),
        elif len(tasks) < 1000:
            print "%03d" % getLookupTable(id=tasks[i][1]),
        elif len(tasks) < 10000:
            print "%04d" % getLookupTable(id=tasks[i][1]),
        else:
            print "%02d" % getLookupTable(id=tasks[i][1]),

        # for completed tasks...
        if tasks[i][7] != "":

            # print an "x" instead of priority and then the task list and name
            print (" x  " + tasks[i][5] + ": " + tasks[i][2]).encode("utf-8"),

            # print notes indicator, if requested
            if DISP_NOTES == 1:
                for j in range(tasks[i][9]):
                    print "*",

            # print the tags, if any
            if (len(tasks[i][8]) != 0) and (DISP_TAGS == 1):
                for j in range(len(tasks[i][8])):
                    print "#" + tasks[i][8][j],

            # get the completed date as a string
            date = str(tasks[i][7])

            # convert the date into a datetime object
            date = datetime.strptime(date, "%Y-%m-%dT%H:%M:%SZ").replace(tzinfo=utc).astimezone(Local)

            # print the completed date
            print "x " + weekdays[date.weekday()] + " " + str(date)[5:10]


        # for uncompleted tasks..
        else:

            # print the priority and the task's list and task in color, if desired
            if tasks[i][3] != "N":

                # for plain output..
                if PLAIN == 1:
                   print ("(" + tasks[i][3] + ") " + tasks[i][5] + ": " + tasks[i][2]).encode("utf-8"),

                # for colored output...
                else:
                    if tasks[i][3] == "1":
                        print (COLOR_PRI1 + '(' + tasks[i][3] + ') ' + tasks[i][5] + ': ' + tasks[i][2]).encode("utf-8"),
                    elif tasks[i][3] == "2":
                        print (COLOR_PRI2 + '(' + tasks[i][3] + ') ' + tasks[i][5] + ': ' + tasks[i][2]).encode("utf-8"),
                    elif tasks[i][3] == "3":
                        print (COLOR_PRI3 + '(' + tasks[i][3] + ') ' + tasks[i][5] + ': ' + tasks[i][2]).encode("utf-8"),

            # when there is no priority, indent more and print the list and task
            else:
                print ("    " + tasks[i][5] + ": " + tasks[i][2]).encode("utf-8"),

            # print the notes indicator, if requested
            if DISP_NOTES == 1:
                for j in range(tasks[i][9]):
                    print "*",

            if PLAIN == 0:
                print COLOR_RESET,


            # print the tags, if any
            if (len(tasks[i][8]) != 0) and (DISP_TAGS == 1):

                # for plain output...
                if PLAIN == 1:
                    for j in range(len(tasks[i][8])):
                        print "#" + tasks[i][8][j],

                # for colored output...
                else:
                    print COLOR_TAG,
                    for j in range(len(tasks[i][8])):
                        print "#" + tasks[i][8][j],
                    print COLOR_RESET,

            # print the due date, if it has one and in color, if desired
            if tasks[i][4] != "":

                # get the due date as a string
                date = str(tasks[i][4])

                # convert the date into a datetime object
                date = datetime.strptime(date, "%Y-%m-%dT%H:%M:%SZ").replace(tzinfo=utc).astimezone(Local)

                # for plain output...
                if PLAIN == 1:
                    print "| " + weekdays[date.weekday()] + " " + str(date)[5:10]

                # for colored output...
                else:
                    print COLOR_DUE + '| ' + weekdays[date.weekday()] + " " + str(date)[5:10] + COLOR_RESET

            # print a newline if there's no due date
            else:
                print ""

# END lsp()
# ========================================================================================================= #



# ========================================================================================================= #
# lsd <filterString>                                                                                        #
#    Print a list of all of the tasks sorted first by date, then priority and then by task name.  The tasks #
#    can be optionally filtered using RTM's built in filter.                                                #
# ========================================================================================================= #
def lsd(filterString=""):

    # login to RTM and authenticate the user
    if MODE != "interactive":
        login()

    # filter out completed tasks, if requested
    if DISP_COMP == 0:
        filterString = filterString + " status:incomplete"

    # get the tasks
    getTasks(filterString=filterString)

    # sort tasks by task due date, then completed, priority, and task name
    global tasks
    tasks = sorted(tasks, key=itemgetter(4,7,3,2))

    # initial list heading
    current_due_date = ""

    # cycle through each task item
    for i in range(len(tasks)):

        # if the task due date is new...print the new due date
        if tasks[i][4] != current_due_date:
            current_due_date = tasks[i][4]

            # get the due date as a string
            date = str(tasks[i][4])

            # convert the date into a datetime object
            date = datetime.strptime(date, "%Y-%m-%dT%H:%M:%SZ").replace(tzinfo=utc).astimezone(Local)

            # for plain output...
            if PLAIN == 1:
                print ""
                print "   " + weekdays[date.weekday()] + " " + str(date)[5:10]

            # for colored output...
            else:
                print ""
                print COLOR_DUE + '   ' + weekdays[date.weekday()] + " " + str(date)[5:10] + COLOR_RESET


        # print task index value, padded with zeros (depending on # of tasks)
        if len(tasks) < 100:
            print "%02d" % getLookupTable(id=tasks[i][1]),
        elif len(tasks) < 1000:
            print "%03d" % getLookupTable(id=tasks[i][1]),
        elif len(tasks) < 10000:
            print "%04d" % getLookupTable(id=tasks[i][1]),
        else:
            print "%02d" % getLookupTable(id=tasks[i][1]),


        # if task is completed...
        if tasks[i][7] != "":
            # print an 'x' instead of priority and then the list name and task
            sys.stdout.write("  x  " + tasks[i][5] + ": " + tasks[i][2])

            # print the notes indicator, if requested
            if DISP_NOTES == 1:
                for j in range(tasks[i][9]):
                    sys.stdout.write("*")

            # print the tags, if any
            if (len(tasks[i][8]) != 0) and (DISP_TAGS == 1):
                for j in range(len(tasks[i][8])):
                    sys.stdout.write(" #" + tasks[i][8][j])

            # get the completed date as a string
            date = str(tasks[i][7])

            # convert the date into a datetime object
            date = datetime.strptime(date, "%Y-%m-%dT%H:%M:%SZ").replace(tzinfo=utc).astimezone(Local)

            # print the completed date
            print " x " + weekdays[date.weekday()] + " " + str(date)[5:10]


        # for uncompleted tasks...
        else:

            # print the priority, if present, and the task list and name in color, if desired
            if tasks[i][3] != "N":

                # for plain output..
                if PLAIN == 1:
                    sys.stdout.write(" (" + tasks[i][3] + ") " + tasks[i][5] + ": " + tasks[i][2])


                # for colored output...
                else:
                    if tasks[i][3] == "1":
                        sys.stdout.write((COLOR_PRI1 + ' (' + tasks[i][3] + ') ' + tasks[i][5] + ": " + tasks[i][2]).encode('utf-8'))
                    elif tasks[i][3] == "2":
                        sys.stdout.write((COLOR_PRI2 + ' (' + tasks[i][3] + ') ' + tasks[i][5] + ": " + tasks[i][2]).encode('utf-8'))
                    elif tasks[i][3] == "3":
                        sys.stdout.write((COLOR_PRI3 + ' (' + tasks[i][3] + ') ' + tasks[i][5] + ": " + tasks[i][2]).encode('utf-8'))


            # indent non-prioritized tasks further
            else:
                sys.stdout.write("     " + tasks[i][5] + ": " + tasks[i][2])


            # print the notes indicator, if requested
            if DISP_NOTES == 1:
                for j in range(tasks[i][9]):
                     sys.stdout.write("*")

            if PLAIN == 0:
                sys.stdout.write(COLOR_RESET)

            # print the tags, if any
            if (len(tasks[i][8]) != 0) and (DISP_TAGS == 1):

                # for plain output...
                if PLAIN == 1:
                    for j in range(len(tasks[i][8])):
                        sys.stdout.write(" #" + tasks[i][8][j])

                # for colored output...
                else:
                    sys.stdout.write(COLOR_TAG)
                    for j in range(len(tasks[i][8])):
                        sys.stdout.write(" #" + tasks[i][8][j])
                    sys.stdout.write(COLOR_RESET)

            print ""

    print ""

# END lsd()
# ========================================================================================================= #



# ========================================================================================================= #
# add <task>                                                                                                #
#    Add a task given the optional task info as an argument.  If no argument is given, the user will be     #
#   prompted to enter each item separately.                                                                 #
# ========================================================================================================= #
def add(task):

    # login to RTM and authenticate the user
    if MODE != "interactive":
        login()

    # replace 'p:' with '!' for the priority
    task = task.replace("p:","!")

    # replace 'l:' with '#" for the list
    task = task.replace("l:","#")

    # replace 't:' with '#" for the tags
    task = task.replace("t:","#")

    print "adding task: " + task + "..."

    # get a timeline id
    timeline = getTimeline()

    # add the task
    added_task = my_rtm.tasks.add(timeline=timeline, name=task, parse=1)

    # write the transaction ID if it is undoable
    if added_task.transaction.undoable == "1":
        writeTransID(added_task.transaction.id)
    else:
        writeTransID("NA")

# END add()
# ========================================================================================================= #



# ========================================================================================================= #
# madd                                                                                                      #
#    Have the user enter multiple tasks at a prompt before submitting them to RTM.  Enter a blank line to   #
#    end the prompt.                                                                                        #
# ========================================================================================================= #
def madd():

    # Give instructions
    print "Enter each task in the format: task name due date p:priority l:list t:tag"
    print "Enter a blank line when finished."
    print ""

    # The task stack
    stack=[]
    done=0

    while done == 0:
        new_task = raw_input("New Task: ")

        # if a blank line was entered, signal end of input
        if new_task == "":
            done = 1

        # otherwise parse and append the new task to the stack
        else:
            # replace 'p:' with '!' for the priority and 'l:' with '#' for the list
            new_task = new_task.replace("p:","!")
            new_task = new_task.replace("l:","#")
            new_task = new_task.replace("t:","#")

            # append to the task stack
            stack.append(new_task)

    # login to RTM and authenticate the user
    if MODE != "interactive":
        login()

    print ""
    print "submitting tasks to RTM..."

    # get a timeline id
    timeline = getTimeline()

    # signal start of multi-tasks for transaction IDs
    writeTransID("startMulti")

    # submit the tasks to RTM
    while len(stack) != 0:
        task=stack.pop()
        print "adding task: " + task + "..."
        added_task = my_rtm.tasks.add(timeline=timeline, name=task, parse=1)

        # write the transaction ID if it is undoable
        if added_task.transaction.undoable == "1":
            writeTransID(added_task.transaction.id, multi="true")
        else:
            writeTransID("NA", multi="true")

# END madd()
# ========================================================================================================= #



# ========================================================================================================= #
# complete <task index>                                                                                     #
#    This method will mark the task specified by the task index as complete                                 #
# ========================================================================================================= #
def complete(index):

    # login to RTM and authenticate the user
    if MODE != "interactive":
        login()

    print "marking task #" + index + " as complete..."

    # get the timeline
    timeline = getTimeline()

    # get the task id, taskseries id and list id
    (task_id, taskseries_id, list_id) = getTask(index)

    # complete the task
    comp_task = my_rtm.tasks.complete(timeline=timeline, task_id=task_id, taskseries_id=taskseries_id, list_id=list_id)

    # write the transaction ID if it is undoable
    if comp_task.transaction.undoable == "1":
        writeTransID(comp_task.transaction.id)
    else:
        writeTransID("NA")

# END complete()
# ========================================================================================================= #


# ========================================================================================================= #
# mcomplete                                                                                                 #
#    Have the user enter multiple tasks to mark as complete at a prompt before submitting them to RTM.      #
#   Enter a blank line to end the prompt.                                                                   #
# ========================================================================================================= #
def mcomplete():

    # Give instructions
    print "Enter each task index number (separately) at the prompt below to mark these tasks as complete."
    print "Enter a blank line at the task prompt when finished."
    print ""

    # The string of new priorities
    list_args=[]
    stack=[]
    done=0

    # prompt user for task #
    while done == 0:
        index = raw_input("Task #: ")

        # catch a blank line to signal the end of input
        if index == "":
            done = 1

        # otherwise append the task index number to the list
        else:
            list_args.append(index)

    # login to RTM and authenticate the user
    if MODE != "interactive":
        login()

    print ""
    print "submitting completed tasks to RTM..."

    # get a timeline id
    timeline = getTimeline()

    # get task properties before submitting changes,
    # since the task index numbers may change after something is submitted to RTM
    while len(list_args) != 0:

        # get the task index from the list
        task_index = list_args.pop()

        # get the task id, taskseries id and list id
        (task_id, taskseries_id, list_id) = getTask(task_index)

        # save all properties to the stack
        stack.append((task_id, taskseries_id, list_id, task_index))

    # signal the start of a multi-function
    writeTransID("startMulti")

    # now, submit the changes to RTM
    while len(stack) != 0:
        # get the current tasks's saved properties
        props = stack.pop()

        print "marking task #" + props[3] + " as complete..."

        # submit the changes to RTM
        comp_task = my_rtm.tasks.complete(timeline=timeline, task_id=props[0], taskseries_id=props[1], list_id=props[2])

        # write the transaction ID if it is undoable
        if comp_task.transaction.undoable == "1":
            writeTransID(comp_task.transaction.id, multi="true")
        else:
            writeTransID("NA")

# END mcomplete()
# ========================================================================================================= #



# ========================================================================================================= #
# delete <task index>                                                                                       #
#    This method will delete the task specified by the task index                                           #
# ========================================================================================================= #
def delete(index):

    # login to RTM and authenticate the user
    if MODE != "interactive":
        login()

    # when no task is given, prompt the user to enter the task index
    if index == "":
        index = raw_input("Task #: ")

    print "deleting task #" + index + "..."

    # get the timeline
    timeline = getTimeline()

    # get the task id, taskseries id and list id
    (task_id, taskseries_id, list_id) = getTask(index)

    # delete the task
    del_task = my_rtm.tasks.delete(timeline=timeline, task_id=task_id, taskseries_id=taskseries_id, list_id=list_id)

    # write the transaction ID if it is undoable
    if del_task.transaction.undoable == "1":
        writeTransID(del_task.transaction.id)
    else:
        writeTransID("NA")

# END delete()
# ========================================================================================================= #



# ========================================================================================================= #
# mdelete                                                                                                   #
#    Have the user enter multiple tasks to delete at a prompt before submitting them to RTM.                #
#   Enter a blank line to end the prompt.                                                                   #
# ========================================================================================================= #
def mdelete():

    # Give instructions
    print "Enter each task index number (separately) at the prompt below to delete these tasks."
    print "Enter a blank line at the task prompt when finished."
    print ""

    # The string of new priorities
    list_args=[]
    stack=[]
    done=0


    # prompt user for task #
    while done == 0:
        index = raw_input("Task #: ")

        # catch a blank line to signal the end of input
        if index == "":
            done = 1

        # otherwise append the task index number to the list
        else:
            list_args.append(index)

    # login to RTM and authenticate the user
    if MODE != "interactive":
        login()

    print ""
    print "submitting deleted tasks to RTM..."

    # get a timeline id
    timeline = getTimeline()

    # get task properties before submitting changes,
    # since the task index numbers may change after something is submitted to RTM
    while len(list_args) != 0:

        # get the task index from the list
        task_index = list_args.pop()

        # get the task id, taskseries id and list id
        (task_id, taskseries_id, list_id) = getTask(task_index)

        # save all properties to the stack
        stack.append((task_id, taskseries_id, list_id, task_index))

    # signal the start of a multi-function
    writeTransID("startMulti")

    # now, submit the changes to RTM
    while len(stack) != 0:
        # get the current tasks's saved properties
        props = stack.pop()

        print "deleting task #" + props[3] + "..."

        # set the priority of the task
        del_task = my_rtm.tasks.delete(timeline=timeline, task_id=props[0], taskseries_id=props[1], list_id=props[2])

        # write the transaction ID if it is undoable
        if del_task.transaction.undoable == "1":
            writeTransID(del_task.transaction.id, multi="true")
        else:
            writeTransID("NA")


# END mdelete()
# ========================================================================================================= #



# ========================================================================================================= #
# setPriority <task index> <pri>                                                                            #
#    This method will set the task specified by its task index to the specified priority    (1,2,3 or 0)    #
# ========================================================================================================= #
def setPriority(index, pri="1"):

    # login to RTM and authenticate the user
    if MODE != "interactive":
        login()

    print "setting the priority of task #" + index + " to " + pri + "..."

    # get the timeline
    timeline = getTimeline()

    # get the task id, taskseries id and list id
    (task_id, taskseries_id, list_id) = getTask(index)

    # set the priority of the task
    pri_task = my_rtm.tasks.setPriority(timeline=timeline, task_id=task_id, taskseries_id=taskseries_id, list_id=list_id, priority=pri)

    # write the transaction ID if it is undoable
    if pri_task.transaction.undoable == "1":
        writeTransID(pri_task.transaction.id)
    else:
        writeTransID("NA")

# END setPriority()
# ========================================================================================================= #



# ========================================================================================================= #
# msetPriority                                                                                              #
#    Have the user enter multiple tasks and new priorities at a prompt before submitting them to RTM.       #
#   Enter a blank line to end the prompt.                                                                   #
# ========================================================================================================= #
def msetPriority():

    # Give instructions
    print "Enter each task index number followed by its new priority (1,2,3 or 0 to remove)."
    print "Enter a blank line at the task prompt when finished."
    print ""

    # The string of new priorities
    list_args=[]
    stack=[]
    done=0


    # prompt user for task # and priorities
    while done == 0:
        index = raw_input("Task #: ")

        # catch a blank line to signal the end of input
        if index == "":
            done = 1

        # append arguments to the list
        else:
            new_pri = raw_input("New Pri: ")
            list_args.append(index)
            list_args.append(new_pri)

    # login to RTM and authenticate the user
    if MODE != "interactive":
        login()

    print ""
    print "submitting new priorities to RTM..."

    # get a timeline id
    timeline = getTimeline()

    # get task properties before submitting changes,
    # since the task index numbers may change after something is submitted to RTM
    while len(list_args) != 0:

        # get the new prioritiy and task index from the list
        new_pri = list_args.pop()
        task_index = list_args.pop()

        # get the task id, taskseries id and list id
        (task_id, taskseries_id, list_id) = getTask(task_index)

        # save all properties to the stack
        stack.append((task_id, taskseries_id, list_id, new_pri, task_index))

    # signal the start of a multi function
    writeTransID("startMulti")

    # now, submit the changes to RTM
    while len(stack) != 0:
        # get the current tasks's saved properties
        props = stack.pop()

        print "setting the priority of task #" + props[4] + " to " + props[3] + "..."

        # set the priority of the task
        pri_task = my_rtm.tasks.setPriority(timeline=timeline, task_id=props[0], taskseries_id=props[1], list_id=props[2], priority=props[3])

        # write the transaction ID if it is undoable
        if pri_task.transaction.undoable == "1":
            writeTransID(pri_task.transaction.id, multi="true")
        else:
            writeTransID("NA")

# END msetPriority()
# ========================================================================================================= #



# ========================================================================================================= #
# move <task index> <new list name>                                                                         #
#    This method will move the task specified by its index to the specified new list                        #
# ========================================================================================================= #
def move(index, list):

    # login to RTM and authenticate the user
    if MODE != "interactive":
        login()

    print "moving task #" + index + " to list " + list + "..."

    # get the timeline
    timeline = getTimeline()

    # get the new list id
    to_list_id = getList(name=list)

    # get the task id, taskseries id and old list id
    (task_id, taskseries_id, from_list_id) = getTask(index)

    # move the task
    moved_task = my_rtm.tasks.moveTo(timeline=timeline, task_id=task_id, taskseries_id=taskseries_id, from_list_id=from_list_id, to_list_id=to_list_id)

    # write the transaction ID if it is undoable
    if moved_task.transaction.undoable == "1":
        writeTransID(moved_task.transaction.id)
    else:
        writeTransID("NA")

# END move()
# ========================================================================================================= #



# ========================================================================================================= #
# mmove                                                                                                     #
#    Have the user enter multiple tasks and new lists at a prompt before submitting them to RTM.            #
#   Enter a blank line to end the prompt.                                                                   #
# ========================================================================================================= #
def mmove():

    # Give instructions
    print "Enter each task index number followed by its new list at the following prompts."
    print "Enter a blank line at the task prompt when finished."
    print ""

    # The string of new priorities
    list_args=[]
    stack=[]
    done=0

    # prompt user for task # and the new lists
    while done == 0:
        index = raw_input("Task #: ")

        # catch a blank line to signal the end of input
        if index == "":
            done = 1

        # append arguments to the list
        else:
            new_list = raw_input("Move to: ")
            list_args.append(index)
            list_args.append(new_list)

    # login to RTM and authenticate the user
    if MODE != "interactive":
        login()

    print ""
    print "submitting changes to RTM..."

    # get a timeline id
    timeline = getTimeline()

    # get task properties before submitting changes,
    # since the task index numbers may change after something is submitted to RTM
    while len(list_args) != 0:

        # get the new list name and task index from the list
        new_list_name = list_args.pop()
        task_index = list_args.pop()

        # get the new list id
        new_list_id = getList(name=new_list_name)

        # get the task id, taskseries id and old list id
        (task_id, taskseries_id, old_list_id) = getTask(task_index)

        # save all properties to the stack
        stack.append((task_id, taskseries_id, old_list_id, new_list_id, task_index, new_list_name))

    # signal the start of a multi-function
    writeTransID("startMulti")

    # now, submit the changes to RTM
    while len(stack) != 0:
        # get the current tasks's saved properties
        props = stack.pop()

        print "moving task #" + props[4] + " to list " + props[5] + "..."

        # move the task to the new list
        moved_task = my_rtm.tasks.moveTo(timeline=timeline, task_id=props[0], taskseries_id=props[1], from_list_id=props[2], to_list_id=props[3])

        # write the transaction ID if it is undoable
        if moved_task.transaction.undoable == "1":
            writeTransID(moved_task.transaction.id, multi="true")
        else:
            writeTransID("NA")

# END mmove()
# ========================================================================================================= #



# ========================================================================================================= #
# setDueDate <task index> <due date>                                                                        #
#    This method will set the task specified by its task index to the RTM-parsed due date                   #
# ========================================================================================================= #
def setDueDate(index, due_date="today"):

    # login to RTM and authenticate the user
    if MODE != "interactive":
        login()

    print "setting task #" + index + " as due: " + due_date + "..."

    # get the timeline
    timeline = getTimeline()

    # get the task id, taskseries id and old list id
    (task_id, taskseries_id, list_id) = getTask(index)

    # move the task
    due_task = my_rtm.tasks.setDueDate(timeline=timeline, task_id=task_id, taskseries_id=taskseries_id, list_id=list_id, due=due_date, parse=1)

    # write the transaction ID if it is undoable
    if due_task.transaction.undoable == "1":
        writeTransID(due_task.transaction.id)
    else:
        writeTransID("NA")

# END setDueDate()
# ========================================================================================================= #



# ========================================================================================================= #
# msetDueDate                                                                                               #
#    Have the user enter multiple tasks and new due dates at a prompt before submitting them to RTM.        #
#   Enter a blank line to end the prompt.                                                                   #
# ========================================================================================================= #
def msetDueDate():

    # Give instructions
    print "Enter each task index number followed by its new due date at the following prompts."
    print "Enter a blank line at the task prompt when finished."
    print ""

    # The string of new priorities
    list_args=[]
    stack=[]
    done=0

    # prompt user for task # and the new due date
    while done == 0:
        index = raw_input("Task #: ")

        # catch a blank line to signal the end of input
        if index == "":
            done = 1

        # append arguments to the list
        else:
            new_date = raw_input("New Due Date: ")
            list_args.append(index)
            list_args.append(new_date)

    # login to RTM and authenticate the user
    if MODE != "interactive":
        login()

    print ""
    print "submitting new due dates to RTM..."

    # get a timeline id
    timeline = getTimeline()

    # get task properties before submitting changes,
    # since the task index numbers may change after something is submitted to RTM
    while len(list_args) != 0:

        # get the new due date and task index from the list
        new_due_date = list_args.pop()
        task_index = list_args.pop()

        # get the task id, taskseries id and old list id
        (task_id, taskseries_id, list_id) = getTask(task_index)

        # save all properties to the stack
        stack.append((task_id, taskseries_id, list_id, new_due_date, task_index))

    # signal the start of a multi-function
    writeTransID("startMulti")

    # now, submit the changes to RTM
    while len(stack) != 0:
        # get the current tasks's saved properties
        props = stack.pop()

        print "setting the due date of task #" + props[4] + " to " + props[3] + "..."

        # move the task to the new list
        due_task = my_rtm.tasks.setDueDate(timeline=timeline, task_id=props[0], taskseries_id=props[1], list_id=props[2], due=props[3], parse=1)

        # write the transaction ID if it is undoable
        if due_task.transaction.undoable == "1":
            writeTransID(due_task.transaction.id, multi="true")
        else:
            writeTransID("NA")

# END msetDueDate()
# ========================================================================================================= #



# ========================================================================================================= #
# uncomplete <task index>                                                                                   #
#    This method will uncomplete the task specified by its index                                            #
# ========================================================================================================= #
def uncomplete(index):

    # login to RTM and authenticate the user
    if MODE != "interactive":
        login()

    print "uncompleting task #" + index + "..."

    # get the timeline
    timeline = getTimeline()

    # get the task id, taskseries id and list id
    (task_id, taskseries_id, list_id) = getTask(index)

    # delete the task
    unc_task = my_rtm.tasks.uncomplete(timeline=timeline, task_id=task_id, taskseries_id=taskseries_id, list_id=list_id)

    # write the transaction ID if it is undoable
    if unc_task.transaction.undoable == "1":
        writeTransID(unc_task.transaction.id)
    else:
        writeTransID("NA")

# END uncomplete()
# ========================================================================================================= #


# ========================================================================================================= #
# muncomplete                                                                                               #
#    Have the user enter multiple tasks to mark as uncomplete at a prompt before submitting them to RTM.    #
#   Enter a blank line to end the prompt.                                                                   #
# ========================================================================================================= #
def muncomplete():

    # Give instructions
    print "Enter each task index number (separately) at the prompt below to mark these tasks as incomplete."
    print "Enter a blank line at the task prompt when finished."
    print ""

    # The string of new priorities
    list_args=[]
    stack=[]
    done=0

    # prompt user for task #
    while done == 0:
        index = raw_input("Task #: ")

        # catch a blank line to signal the end of input
        if index == "":
            done = 1

        # otherwise append the task index number to the list
        else:
            list_args.append(index)

    # login to RTM and authenticate the user
    if MODE != "interactive":
        login()

    print ""
    print "submitting incompleted tasks to RTM..."

    # get a timeline id
    timeline = getTimeline()

    # get task properties before submitting changes,
    # since the task index numbers may change after something is submitted to RTM
    while len(list_args) != 0:

        # get the task index from the list
        task_index = list_args.pop()

        # get the task id, taskseries id and list id
        (task_id, taskseries_id, list_id) = getTask(task_index)

        # save all properties to the stack
        stack.append((task_id, taskseries_id, list_id, task_index))

    # signal the start of a multi function
    writeTransID("startMulti")

    # now, submit the changes to RTM
    while len(stack) != 0:
        # get the current tasks's saved properties
        props = stack.pop()

        print "marking task #" + props[3] + " as incomplete..."

        # submit the changes to RTM
        unc_task = my_rtm.tasks.uncomplete(timeline=timeline, task_id=props[0], taskseries_id=props[1], list_id=props[2])

        # write the transaction ID if it is undoable
        if unc_task.transaction.undoable == "1":
            writeTransID(unc_task.transaction.id, multi="true")
        else:
            writeTransID("NA")

# END muncomplete()
# ========================================================================================================= #



# ========================================================================================================= #
# postpone <task index>                                                                                     #
#    This method will postpone the task specified by its index                                              #
# ========================================================================================================= #
def postpone(index):

    # login to RTM and authenticate the user
    if MODE != "interactive":
        login()

    print "postponing task #" + index + "..."

    # get the timeline
    timeline = getTimeline()

    # get the task id, taskseries id and list id
    (task_id, taskseries_id, list_id) = getTask(index)

    # delete the task
    post_task = my_rtm.tasks.postpone(timeline=timeline, task_id=task_id, taskseries_id=taskseries_id, list_id=list_id)

    # write the transaction ID if it is undoable
    if post_task.transaction.undoable == "1":
        writeTransID(post_task.transaction.id)
    else:
        writeTransID("NA")

# END postpone()
# ========================================================================================================= #



# ========================================================================================================= #
# mpostpone                                                                                                 #
#    Have the user enter multiple tasks to postpone at a prompt before submitting them to RTM.              #
#   Enter a blank line to end the prompt.                                                                   #
# ========================================================================================================= #
def mpostpone():

    # Give instructions
    print "Enter each task index number (separately) at the prompt below to postpone these tasks by one day."
    print "Enter a blank line at the task prompt when finished."
    print ""

    # The string of new priorities
    list_args=[]
    stack=[]
    done=0

    # prompt user for task #
    while done == 0:
        index = raw_input("Task #: ")

        # catch a blank line to signal the end of input
        if index == "":
            done = 1

        # otherwise append the task index number to the list
        else:
            list_args.append(index)

    # login to RTM and authenticate the user
    if MODE != "interactive":
        login()

    print ""
    print "submitting postponed tasks to RTM..."

    # get a timeline id
    timeline = getTimeline()

    # get task properties before submitting changes,
    # since the task index numbers may change after something is submitted to RTM
    while len(list_args) != 0:

        # get the task index from the list
        task_index = list_args.pop()

        # get the task id, taskseries id and list id
        (task_id, taskseries_id, list_id) = getTask(task_index)

        # save all properties to the stack
        stack.append((task_id, taskseries_id, list_id, task_index))

    # signal the start of a multi function
    writeTransID("startMulti")

    # now, submit the changes to RTM
    while len(stack) != 0:
        # get the current tasks's saved properties
        props = stack.pop()

        print "postponing task #" + props[3] + "..."

        # submit the changes to RTM
        post_task = my_rtm.tasks.postpone(timeline=timeline, task_id=props[0], taskseries_id=props[1], list_id=props[2])

        # write the transaction ID if it is undoable
        if post_task.transaction.undoable == "1":
            writeTransID(post_task.transaction.id, multi="true")
        else:
            writeTransID("NA")

# END mpostpone()
# ========================================================================================================= #



# ========================================================================================================= #
# addList <list name>                                                                                       #
#    Add a new list given the list name.                                                                    #
# ========================================================================================================= #
def addList(name):

    # login to RTM and authenticate the user
    if MODE != "interactive":
        login()

    print "creating new list: " + name + "..."

    # get a timeline id
    timeline = getTimeline()

    # add the task
    new_list = my_rtm.lists.add(timeline=timeline, name=name)

    # write the transaction ID if it is undoable
    if new_list.transaction.undoable == "1":
        writeTransID(new_list.transaction.id)
    else:
        writeTransID("NA")

# END addList()
# ========================================================================================================= #



# ========================================================================================================= #
# maddList                                                                                                  #
#    Have the user enter multiple new lists a prompt before submitting them to RTM.  Enter a blank line to  #
#    end the prompt.                                                                                        #
# ========================================================================================================= #
def maddList():

    # Give instructions
    print "Enter each new list name at the prompt below."
    print "Enter a blank line when finished."
    print ""

    # The task stack
    stack=[]
    done=0

    while done == 0:
        new_list = raw_input("New List Name: ")

        # if a blank line was entered, signal end of input
        if new_list == "":
            done = 1

        # otherwise parse and append the new task to the stack
        else:
            # append to the task stack
            stack.append(new_list)

    # login to RTM and authenticate the user
    if MODE != "interactive":
        login()

    print ""
    print "submitting new lists to RTM..."

    # get a timeline id
    timeline = getTimeline()

    # signal start of multi-tasks for transaction IDs
    writeTransID("startMulti")

    # submit the tasks to RTM
    while len(stack) != 0:
        list_name = stack.pop()
        print "creating new list: " + list_name + "..."
        created_list = my_rtm.lists.add(timeline=timeline, name=list_name)

        # write the transaction ID if it is undoable
        if created_list.transaction.undoable == "1":
            writeTransID(created_list.transaction.id, multi="true")
        else:
            writeTransID("NA", multi="true")

# END maddList()
# ========================================================================================================= #



# ========================================================================================================= #
# delList <list name>                                                                                       #
#    Delete the list specified by its name.                                                                 #
# ========================================================================================================= #
def delList(name):

    # login to RTM and authenticate the user
    if MODE != "interactive":
        login()

    print "deleting list: " + name + "..."

    # get a timeline id
    timeline = getTimeline()

    # get the list id from the name
    list_id = getList(name=name)

    # add the task
    del_list = my_rtm.lists.delete(timeline=timeline, list_id=list_id)

    # write the transaction ID if it is undoable
    if del_list.transaction.undoable == "1":
        writeTransID(del_list.transaction.id)
    else:
        writeTransID("NA")

# END delList()
# ========================================================================================================= #



# ========================================================================================================= #
# mdelList                                                                                                  #
#    Have the user enter multiple lists to delete at a prompt before submitting them to RTM.  Enter a blank #
#    line to end the prompt.                                                                                #
# ========================================================================================================= #
def mdelList():

    # Give instructions
    print "Enter each list name to delete at the prompt below."
    print "Enter a blank line when finished."
    print ""

    # The task stack
    stack=[]
    done=0

    while done == 0:
        del_list = raw_input("List Name: ")

        # if a blank line was entered, signal end of input
        if del_list == "":
            done = 1

        # otherwise parse and append the new task to the stack
        else:
            # append to the task stack
            stack.append(del_list)

    # login to RTM and authenticate the user
    if MODE != "interactive":
        login()

    print ""
    print "submitting lists to RTM for removal..."

    # get a timeline id
    timeline = getTimeline()

    # signal start of multi-tasks for transaction IDs
    writeTransID("startMulti")

    # submit the tasks to RTM
    while len(stack) != 0:

        # get the list name
        list_name = stack.pop()

        # get the list id
        list_id = getList(name=list_name)

        print "deleting list: " + list_name + "..."

        deleted_list = my_rtm.lists.delete(timeline=timeline, list_id=list_id)

        # write the transaction ID if it is undoable
        if deleted_list.transaction.undoable == "1":
            writeTransID(deleted_list.transaction.id, multi="true")
        else:
            writeTransID("NA", multi="true")

# END mdelList()
# ========================================================================================================= #



# ========================================================================================================= #
# renameList <old list name> <new list name>                                                                #
#    Renames the task list from <old list name> to <new list name>                                          #
# ========================================================================================================= #
def renameList(old_name, new_name):

    # login to RTM and authenticate the user
    if MODE != "interactive":
        login()

    print "renaming list: " + old_name + " to " + new_name + "..."

    # get a timeline id
    timeline = getTimeline()

    # get the list id from the name
    old_list_id = getList(name=old_name)

    # add the task
    new_list = my_rtm.lists.setName(timeline=timeline, list_id=old_list_id, name=new_name)

    # write the transaction ID if it is undoable
    if new_list.transaction.undoable == "1":
        writeTransID(new_list.transaction.id)
    else:
        writeTransID("NA")

# END renameList()
# ========================================================================================================= #



# ========================================================================================================= #
# mrenameList                                                                                               #
#    Have the user enter multiple lists to rename at a prompt before submitting them to RTM.  Enter a blank #
#    line to end the prompt.                                                                                #
# ========================================================================================================= #
def mrenameList():

    # Give instructions
    print "Enter each old list name followed by its new name at the prompt below."
    print "Enter a blank line when finished."
    print ""

    # The task stack
    stack=[]
    done=0

    # prompt user for old and new list name
    while done == 0:
        old_name = raw_input("Old List Name: ")

        # catch a blank line to signal the end of input
        if old_name == "":
            done = 1

        # append arguments to the list
        else:
            new_name = raw_input("New List Name: ")
            stack.append(old_name)
            stack.append(new_name)


    # login to RTM and authenticate the user
    if MODE != "interactive":
        login()

    print ""
    print "submitting list changes to RTM..."

    # get a timeline id
    timeline = getTimeline()

    # signal start of multi-tasks for transaction IDs
    writeTransID("startMulti")

    # submit the tasks to RTM
    while len(stack) != 0:

        # get the new list name
        new_name = stack.pop()

        # get the old list name
        old_name = stack.pop()

        # get the old list id
        old_id = getList(name=old_name)

        print "renaming list: " + old_name + " to " + new_name + "..."

        new_list = my_rtm.lists.setName(timeline=timeline, list_id=old_id, name=new_name)

        # write the transaction ID if it is undoable
        if new_list.transaction.undoable == "1":
            writeTransID(new_list.transaction.id, multi="true")
        else:
            writeTransID("NA", multi="true")

# END mrenameList()
# ========================================================================================================= #



# ========================================================================================================= #
# addTags <task index> <comma separated list of tags>                                                       #
#    Adds the given tags to the specified task                                                              #
# ========================================================================================================= #
def addTags(index, tags):

    # login to RTM and authenticate the user
    if MODE != "interactive":
        login()

    print "adding tags: " + tags + " to task #" + index + "..."

    # get a timeline id
    timeline = getTimeline()

    # get the task id, taskseries id and list id
    (task_id, taskseries_id, list_id) = getTask(index)

    # add the new tags
    new_task = my_rtm.tasks.addTags(timeline=timeline, list_id=list_id, taskseries_id=taskseries_id, task_id=task_id, tags=tags)

    # write the transaction ID if it is undoable
    if new_task.transaction.undoable == "1":
        writeTransID(new_task.transaction.id)
    else:
        writeTransID("NA")

# END addTags()
# ========================================================================================================= #



# ========================================================================================================= #
# maddTags                                                                                                  #
#    Have the user enter multiple tasks and tags at a prompt before submitting them to RTM.  Enter a blank  #
#    line to end the prompt.                                                                                #
# ========================================================================================================= #
def maddTags():

    # Give instructions
    print "Enter each task followed by the tags to add to it at the prompt below."
    print "Enter a blank line when finished."
    print ""

    # The task stack
    list_args=[]
    stack=[]
    done=0

    # prompt user for old and new list name
    while done == 0:
        task_index = raw_input("Task #: ")

        # catch a blank line to signal the end of input
        if task_index == "":
            done = 1

        # append arguments to the list
        else:
            tags = raw_input("Tags: ")
            tags = tags.replace(" ",",")
            tags = tags.replace(",,",",")

            list_args.append(task_index)
            list_args.append(tags)


    # login to RTM and authenticate the user
    if MODE != "interactive":
        login()

    print ""
    print "submitting new tags to RTM..."

    # get a timeline id
    timeline = getTimeline()

    # get task properties before submitting changes,
    # since the task index numbers may change after something is submitted to RTM
    while len(list_args) != 0:

        # get the new prioritiy and task index from the list
        new_tags = list_args.pop()
        task_index = list_args.pop()

        # get the task id, taskseries id and list id
        (task_id, taskseries_id, list_id) = getTask(task_index)

        # save all properties to the stack
        stack.append((task_id, taskseries_id, list_id, task_index, new_tags))

    # signal the start of a multi function
    writeTransID("startMulti")

    # now, submit the changes to RTM
    while len(stack) != 0:
        # get the current tasks's saved properties
        props = stack.pop()

        print "adding tags: " + props[4] + " to task #" + props[3] + "..."

        # add new tags
        new_task = my_rtm.tasks.addTags(timeline=timeline, list_id=props[2], taskseries_id=props[1], task_id=props[0], tags=props[4])

        # write the transaction ID if it is undoable
        if new_task.transaction.undoable == "1":
            writeTransID(new_task.transaction.id, multi="true")
        else:
            writeTransID("NA", multi="true")

# END maddTags()
# ========================================================================================================= #



# ========================================================================================================= #
# delTags <task index> <comma separated list of tags>                                                       #
#    Removes the given tags from the specified task                                                         #
# ========================================================================================================= #
def delTags(index, tags):

    # login to RTM and authenticate the user
    if MODE != "interactive":
        login()

    print "removing tags: " + tags + " from task #" + index + "..."

    # get a timeline id
    timeline = getTimeline()

    # get the task id, taskseries id and list id
    (task_id, taskseries_id, list_id) = getTask(index)

    # remove the given tags
    new_task = my_rtm.tasks.removeTags(timeline=timeline, list_id=list_id, taskseries_id=taskseries_id, task_id=task_id, tags=tags)

    # write the transaction ID if it is undoable
    if new_task.transaction.undoable == "1":
        writeTransID(new_task.transaction.id)
    else:
        writeTransID("NA")

# END delTags()
# ========================================================================================================= #



# ========================================================================================================= #
# mdelTags                                                                                                  #
#    Have the user enter multiple tasks and tags to remove at a prompt before submitting them to RTM.       #
#    Enter a blank line to end the prompt.                                                                  #
# ========================================================================================================= #
def mdelTags():

    # Give instructions
    print "Enter each task followed by the tags to remove from it at the prompt below."
    print "Enter a blank line when finished."
    print ""

    # The task stack
    list_args=[]
    stack=[]
    done=0

    # prompt user for old and new list name
    while done == 0:
        task_index = raw_input("Task #: ")

        # catch a blank line to signal the end of input
        if task_index == "":
            done = 1

        # append arguments to the list
        else:
            tags = raw_input("Tags: ")
            tags = tags.replace(" ",",")
            tags = tags.replace(",,",",")

            list_args.append(task_index)
            list_args.append(tags)


    # login to RTM and authenticate the user
    if MODE != "interactive":
        login()

    print ""
    print "submitting tags to remove to RTM..."

    # get a timeline id
    timeline = getTimeline()

    # get task properties before submitting changes,
    # since the task index numbers may change after something is submitted to RTM
    while len(list_args) != 0:

        # get the new prioritiy and task index from the list
        new_tags = list_args.pop()
        task_index = list_args.pop()

        # get the task id, taskseries id and list id
        (task_id, taskseries_id, list_id) = getTask(task_index)

        # save all properties to the stack
        stack.append((task_id, taskseries_id, list_id, task_index, new_tags))

    # signal the start of a multi function
    writeTransID("startMulti")

    # now, submit the changes to RTM
    while len(stack) != 0:
        # get the current tasks's saved properties
        props = stack.pop()

        print "removing tags: " + props[4] + " to task #" + props[3] + "..."

        # remove tags
        new_task = my_rtm.tasks.removeTags(timeline=timeline, list_id=props[2], taskseries_id=props[1], task_id=props[0], tags=props[4])

        # write the transaction ID if it is undoable
        if new_task.transaction.undoable == "1":
            writeTransID(new_task.transaction.id, multi="true")
        else:
            writeTransID("NA", multi="true")

# END mdelTags()
# ========================================================================================================= #



# ========================================================================================================= #
# addNote <task index> <note title> <note body>                                                             #
#    Adds a note to the given task with the specified title and body                                        #
# ========================================================================================================= #
def addNote(index, title, body):

    # login to RTM and authenticate the user
    if MODE != "interactive":
        login()

    print "adding note to task # " + index + "..."

    # get a timeline id
    timeline = getTimeline()

    # get the task id, taskseries id and list id
    (task_id, taskseries_id, list_id) = getTask(index)

    # add the new tags
    rsp = my_rtm.tasksNotes.add(timeline=timeline, list_id=list_id, taskseries_id=taskseries_id, task_id=task_id, note_title=title, note_text=body)

    # write the transaction ID if it is undoable
    if rsp.transaction.undoable == "1":
        writeTransID(rsp.transaction.id)
    else:
        writeTransID("NA")

# END addNote()
# ========================================================================================================= #



# ========================================================================================================= #
# maddNote                                                                                                  #
#    Have the user enter multiple new notes before submitting them to RTM.  Enter a blank line to end the   #
#    prompt.                                                                                                #
# ========================================================================================================= #
def maddNote():

    # Give instructions
    print "Enter each task # followed by the note title and then the note body at the prompts below."
    print "Enter a blank line when finished."
    print ""

    # The task stack
    list_args=[]
    stack=[]
    done=0

    # prompt user for note titles and bodies
    while done == 0:
        task_index = raw_input("Task #: ")

        # catch a blank line to signal the end of input
        if task_index == "":
            done = 1

        # append arguments to the list
        else:
            title = raw_input("Title: ")
            body = raw_input("Body: ")

            list_args.append(task_index)
            list_args.append(title)
            list_args.append(body)


    # login to RTM and authenticate the user
    if MODE != "interactive":
        login()

    print ""
    print "submitting new notes to RTM..."

    # get a timeline id
    timeline = getTimeline()

    # get task properties before submitting changes,
    # since the task index numbers may change after something is submitted to RTM
    while len(list_args) != 0:

        # get the each body, title and task index from the list
        note_body = list_args.pop()
        note_title = list_args.pop()
        task_index = list_args.pop()

        # get the task id, taskseries id and list id
        (task_id, taskseries_id, list_id) = getTask(task_index)

        # save all properties to the stack
        stack.append((task_id, taskseries_id, list_id, task_index, note_title, note_body))

    # signal the start of a multi function
    writeTransID("startMulti")

    # now, submit the changes to RTM
    while len(stack) != 0:
        # get the current tasks's saved properties
        props = stack.pop()

        print "adding note to task #" + props[3] + "..."

        # add new tags
        rsp = my_rtm.tasksNotes.add(timeline=timeline, list_id=props[2], taskseries_id=props[1], task_id=props[0], note_title=props[4], note_text=props[5])

        # write the transaction ID if it is undoable
        if rsp.transaction.undoable == "1":
            writeTransID(rsp.transaction.id, multi="true")
        else:
            writeTransID("NA", multi="true")

# END maddNote()
# ========================================================================================================= #



# ========================================================================================================= #
# delNote <task index>                                                                                      #
#    This method will display the title of the notes for the specified task, asking the user if it should   #
#    be deleted.                                                                                            #
# ========================================================================================================= #
def delNote(index=""):

    if MODE != "interactive":
        login()


    if index == "":
        index = raw_input("Task #: ")


    print "Choose which notes to delete from the list below"
    print ""

    # get the task properties
    (task_id, taskseries_id, list_id) = getTask(index)

    # find the task
    root = my_rtm.tasks.getList()
    for lists in root.tasks.list:
        if hasattr(lists, "taskseries"):
            if isinstance(lists.taskseries, list):
				for series in lists.taskseries:
					if series.id == taskseries_id:
						series_elem = series
						notes = series_elem.notes
            else:
			    series = lists.taskseries
			    if series.id == taskseries_id:
				    series_elem = series
				    notes = series_elem.notes


    if notes == []:
        print "This task has no notes"

    # Have the user choose which notes to delete
    else:
        stack=[]

        # get a timeline id
        timeline = getTimeline()

        # display the titles each note, prompt the user if it should be deleted
        if isinstance(notes.note, list):
			for note in notes.note:
			    if ( note.title != "" ):
			        print "Title: " + note.title
			    else:
			        print "Body: " + getattr(note, "$t")
			    dn = raw_input("Delete this note (y/n)? ")
			    if (dn == "y" or dn == "Y" or dn == "yes" or dn == "Yes" or dn == "YES"):
			        stack.append(note.id)
			    print ""

        else:
            note = notes.note

            if ( note.title != "" ):
                print "Title: " + note.title
            else:
			    print "Body: " + getattr(note, "$t")
            dn = raw_input("Delete this note (y/n)?")
            if (dn == "y" or dn == "Y" or dn == "yes" or dn == "Yes" or dn == "YES"):
                stack.append(note.id)
            print ""

        # loop through each note that was selected, and delete
        for i in range(len(stack)):
            print "Deleting note # " + stack[i] + "..."

            # delete the note
            rsp = my_rtm.tasksNotes.delete(timeline=timeline, note_id=stack[i])

            # write the transaction ID if it is undoable
            if rsp.transaction.undoable == "1":
                writeTransID(rsp.transaction.id, multi="true")
            else:
                writeTransID("NA", multi="true")

# END delNote()
# ========================================================================================================= #



# ========================================================================================================= #
# getNotes <task index>                                                                                     #
#    This method will display the notes, if any, for the specified task                                     #
# ========================================================================================================= #
def getNotes(index):

    if MODE != "interactive":
        login()

    # get the task properties
    (task_id, taskseries_id, list_id) = getTask(index)

    # find the task
    root = my_rtm.tasks.getList()
    for lists in root.tasks.list:
        if hasattr(lists, "taskseries"):
            if isinstance(lists.taskseries, list):
				for series in lists.taskseries:
					if series.id == taskseries_id:
						series_elem = series
						notes = series_elem.notes
            else:
			    series = lists.taskseries
			    if series.id == taskseries_id:
				    series_elem = series
				    notes = series_elem.notes


    if notes == []:
        print "This task has no notes"
    else:
        print "----------------------------------------------------"
        if isinstance(notes.note, list):
			for note in notes.note:
			    space_len = (52-len(note.title))/2
			    for i in range(space_len):
			        sys.stdout.write(" ")
			    print note.title
			    body = getattr(note, "$t")
			    print body
			    print "----------------------------------------------------"

        else:
            note = notes.note

            space_len = (52-len(note.title))/2
            for i in range(space_len):
                sys.stdout.write(" ")
            print note.title
            body = getattr(note, "$t")
            print body
            print "----------------------------------------------------"

# END getNotes()
# ========================================================================================================= #



# ========================================================================================================= #
# clear                                                                                                     #
#    This method will delete all completed tasks (optionally from a specified filter)                       #
# ========================================================================================================= #
def clear(filterString=""):

    # login in to RTM and authenticate the user
    if MODE != "interactive":
        login()

    # get all tasks
    getTasks(filterString=filterString)

    # the task stack
    stack=[]

    # check all tasks to see if its been completed
    for i in range(len(tasks)):

        # add completed tasks to the stack
        if tasks[i][7] != "":
            stack.append((tasks[i][1], tasks[i][0], tasks[i][6], tasks[i][2]))

    print "cleaning up RTM tasks..."

    # get a timeline id
    timeline = getTimeline()

    # signal the start of a multi function
    writeTransID("startMulti")

    # now, submit the changes to RTM
    while len(stack) != 0:
        # get the current tasks's saved properties
        props = stack.pop()

        print "deleting task: " + props[3] + "..."

        # set the priority of the task
        del_task = my_rtm.tasks.delete(timeline=timeline, task_id=props[0], taskseries_id=props[1], list_id=props[2])

        # write the transaction ID if it is undoable
        if del_task.transaction.undoable == "1":
            writeTransID(del_task.transaction.id, multi="true")
        else:
            writeTransID("NA")

# END clear()
# ========================================================================================================= #



# ========================================================================================================= #
# undo                                                                                                      #
#    This method will undo the transaction that is specified by the transaction ID saved to disk            #
# ========================================================================================================= #
def undo():

    # login to RTM and authenticate the user
    if MODE != "interactive":
        login()

    transIDs = []

    # get the timeline and transIDs
    timeline = getTimeline()
    transIDs = getTransID()


    # when there is no transID found
    if transIDs == []:
        print "No action was found to undo..."

    # when the last action is not undoable
    elif transIDs[0] == "NA":
        print "What you just did cannot be undone..."

    # when there is only one action to undo
    elif len(transIDs) == 1:
        print "undoing the last action..."
        my_rtm.transactions.undo(transaction_id=transIDs[0], timeline=timeline)

    # when there are multiple actions to undo
    else:
        print "undoing the last multi-action..."

        for i in range(len(transIDs)):
            my_rtm.transactions.undo(transaction_id=transIDs[i], timeline=timeline)

    # once undone, remove the transID
    writeTransID("NA")

# END undo()
# ========================================================================================================= #



# ========================================================================================================= #
# planner <start>                                                                                           #
#    This method will print a weekly planner of all tasks due on the displayed date.                        #
#    THIS WILL PRINT VERY WIDE - especially if the task names are long                                      #
#    <start>: today, mon, sun --> determines what day to start the week                                     #
#                                                                                                           #
#   THIS REALLY NEEDS TO BE CLEANED UP                                                                      #
# ========================================================================================================= #
def planner(start="mon", filterString=""):
    # max substring length
    substring_length = PLANNER_LENGTH

    # login to RTM and authenticate the user
    if MODE != "interactive":
        login()

    # get the tasks
    getTasks(filterString=filterString)

    # sort tasks by task due date, then completed, priority, and task name
    global tasks
    tasks = sorted(tasks, key=itemgetter(4,7,3,2))


    # SET UP DAYS OF WEEK

    # Get today's date and day of week
    today_obj = date.today()
    weekday_int = date.weekday(today_obj)
    today = weekdays[weekday_int] + " " + str(today_obj)[5:10]

    # Calculate the first day of this week (depending on what start day is specified)
    if start == "mon":
        first_day_obj = today_obj - timedelta(days = weekday_int)
    elif start == "sun":
        first_day_obj = today_obj - timedelta(days = (weekday_int+1))
    elif start == "today":
        first_day_obj = today_obj
    else:
        print "ERROR: start day " + start + " not recognized."
        sys.exit(2)

    # create a list of date objects for this week
    date_objs=[]
    date_objs.append(first_day_obj)
    for i in range(1,7):
        date_objs.append(first_day_obj + timedelta(days = i))


    # SORT THROUGH AND GATHER TASKS DATA

    # initialize a list for each day of the week
    # a list for anytime tasks
    # a list for all others (not being used as of now)
    day_0=[]
    day_1=[]
    day_2=[]
    day_3=[]
    day_4=[]
    day_5=[]
    day_6=[]
    anytime=[]
    others=[]

    # sort the tasks into their respective lists
    for i in range(len(tasks)):

        # get the due date as a string
        temp_date_obj = str(tasks[i][4])


        # check for tasks with no due date
        if temp_date_obj == "":
            anytime.append((tasks[i][3], tasks[i][5], tasks[i][2], tasks[i][7], len(tasks[i][2])))

        # for tasks with due dates
        else:
            # convert the date into a datetime object
            temp_date_obj = datetime.strptime(temp_date_obj, "%Y-%m-%dT%H:%M:%SZ").replace(tzinfo=utc).astimezone(Local)

            # check the date against each day of the week
            # if it matches, append the task's pri, list, name, completed date, length of task name
            if temp_date_obj.date() == date_objs[0]:
                day_0.append((tasks[i][3], tasks[i][5], tasks[i][2], tasks[i][7], len(tasks[i][2])))
            elif temp_date_obj.date() == date_objs[1]:
                day_1.append((tasks[i][3], tasks[i][5], tasks[i][2], tasks[i][7], len(tasks[i][2])))
            elif temp_date_obj.date() == date_objs[2]:
                day_2.append((tasks[i][3], tasks[i][5], tasks[i][2], tasks[i][7], len(tasks[i][2])))
            elif temp_date_obj.date() == date_objs[3]:
                day_3.append((tasks[i][3], tasks[i][5], tasks[i][2], tasks[i][7], len(tasks[i][2])))
            elif temp_date_obj.date() == date_objs[4]:
                day_4.append((tasks[i][3], tasks[i][5], tasks[i][2], tasks[i][7], len(tasks[i][2])))
            elif temp_date_obj.date() == date_objs[5]:
                day_5.append((tasks[i][3], tasks[i][5], tasks[i][2], tasks[i][7], len(tasks[i][2])))
            elif temp_date_obj.date() == date_objs[6]:
                day_6.append((tasks[i][3], tasks[i][5], tasks[i][2], tasks[i][7], len(tasks[i][2])))
            else:
                others.append((tasks[i][3], tasks[i][5], tasks[i][2], tasks[i][7], len(tasks[i][2])))


    # sort each day by list, completed, priority and then name
    day_0 = sorted(day_0, key=itemgetter(1,3,0,2))
    day_1 = sorted(day_1, key=itemgetter(1,3,0,2))
    day_2 = sorted(day_2, key=itemgetter(1,3,0,2))
    day_3 = sorted(day_3, key=itemgetter(1,3,0,2))
    day_4 = sorted(day_4, key=itemgetter(1,3,0,2))
    day_5 = sorted(day_5, key=itemgetter(1,3,0,2))
    day_6 = sorted(day_6, key=itemgetter(1,3,0,2))
    others = sorted(others, key=itemgetter(1,3,0,2))
    anytime = sorted(anytime, key=itemgetter(1,3,0,2))

    # create 3D array of all tasks within the 1 week range --> days[day of week][task][property]
    days = []
    days.append(day_0)
    days.append(day_1)
    days.append(day_2)
    days.append(day_3)
    days.append(day_4)
    days.append(day_5)
    days.append(day_6)


    # CALCULATE PROPERTIES FOR THE DISPLAY

    # find the max number of lists (across all days) from the number of unique list names
    # and the max number of tasks in each list
    # and the names of the lists
    max_lists = 0
    max_in_lists = {}
    list_names = []

    # this is a mess
    # cycle through each day's tasks
    for i in range(7):

        task_count = 1
        temp_list = ""

        # cycle through each task in day i
        for j in range(len(days[i])):
            if days[i][j][1] != temp_list:
                task_count = 1
                temp_list = days[i][j][1]

            else:
                task_count = task_count + 1


            if max_in_lists.has_key(temp_list):
                if task_count > max_in_lists[temp_list]:
                    max_in_lists[temp_list] = task_count


            else:
                max_in_lists[temp_list] = 1


    # get the number of lists
    max_lists = len(max_in_lists)

    # get the list names and sort
    list_names = max_in_lists.keys()
    list_names.sort()


    # find the max length of a list name (across all days)
    max_list_name = 0
    for i in range(len(list_names)):
        if len(list_names[i]) > max_list_name:
            max_list_name = len(list_names[i])


    # find the max length of the largest task name for each day
    max_length = []
    for i in range(7):

        # set initial max_length for day i
        temp_max_length = max_list_name

        # test the length of each task in day i against the temp max
        # if it is longer, set it as the new temp max
        for j in range(len(days[i])):
            if len(days[i][j][2]) > temp_max_length:
                temp_max_length = len(days[i][j][2])

        # if the max length is greater than the preset max
        # use the preset instead
        if temp_max_length > substring_length:
            temp_max_length = substring_length

        # after all j tasks have been tested,
        # set the temp max as the max for day i
        max_length.append(temp_max_length)


    # find the max number of tasks (across all days)
    max_tasks = 0
    for i in range(7):
        if len(days[i]) > max_tasks:
            max_tasks = len(days[i])


    # total number of lines = sum of the max number of tasks in each list
    max_lines = 0
    for i in range(len(list_names)):
        name=list_names[i]
        max_lines = max_lines + max_in_lists[name]


    # PRINT DATE HEADER

    # first line
    for i in range(7):
        sys.stdout.write('+')

        total = max_length[i]+8


        for j in range(total):
            sys.stdout.write('-')

    print "+"


    # second line
    for i in range(7):
        sys.stdout.write('|')

        current_date = weekdays[date_objs[i].weekday()] + " " + str(date_objs[i])[5:10]

        if current_date == today:
            buffer = (max_length[i]-1)/2

            for j in range(buffer):
                sys.stdout.write(' ')

            sys.stdout.write('**TODAY**')

            if ((max_length[i]-1)%2) != 0:
                buffer = buffer+1
            for j in range(buffer):
                sys.stdout.write(' ')

        else:
            buffer = (max_length[i]-1)/2

            for j in range(buffer):
                sys.stdout.write(' ')

            sys.stdout.write(current_date)

            if ((max_length[i]-1)%2) != 0:
                buffer = buffer+1
            for j in range(buffer):
                sys.stdout.write(' ')

    print "|"


    # third line
    for i in range(7):
        sys.stdout.write('+')

        total = max_length[i]+8


        for j in range(total):
            sys.stdout.write('-')

    print "+"


    # PRINT TASK LISTS
    list_count = 0
    task_count = {0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0}

    # get row numbers for new lists
    row_nums={}
    for j in range(len(list_names)):

        name = list_names[j]

        if j == 0:
            row_nums[name] = 0
        else:
            prev_name = list_names[j-1]
            row_nums[name] = row_nums[prev_name] + max_in_lists[prev_name]


    # next_row: value of h to print the next list heading
    next_row = 0

    # h = row number
    for h in range(max_lines):

        # print a list heading, if needed
        if (h == next_row):
            for i in range(7):
                sys.stdout.write('| ' + list_names[list_count] + ':')
                buffer = max_length[i]-len(list_names[list_count])+6
                for j in range(buffer):
                    sys.stdout.write(' ')
            print "|"

            list_count = list_count + 1

            if list_count < len(list_names):
                next_list = list_names[list_count]
                next_row = row_nums[next_list]

        # print the actual tasks
        for i in range(7):

            sys.stdout.write('|')

            # number of tasks for day i
            days_task_count = task_count[i]

            # if there are tasks left...
            if days_task_count < len(days[i]):

                # list name for the current task
                temp_list_name = days[i][days_task_count][1]

                # Print the task, if it belongs in the current list
                if temp_list_name == list_names[list_count-1]:

                    # increase the task count for the current day
                    task_count[i] = task_count[i] + 1

                    # for completed tasks
                    if days[i][days_task_count][3] != "":
                        sys.stdout.write('    x  ')

                    # for unprioritized tasks
                    elif days[i][days_task_count][0] == "N":
                        sys.stdout.write('       ')

                    # for incomplete tasks, print the priority
                    else:
                        sys.stdout.write('   (' + days[i][days_task_count][0] + ') ')

                    # print the task itself
                    sys.stdout.write(days[i][days_task_count][2][:substring_length].encode('utf-8') + ' ')

                    # print buffer space
                    buffer = max_length[i]-days[i][days_task_count][4]
                    for j in range(buffer):
                        sys.stdout.write(' ')


                # Print a spacer when the task doens't match the list
                else:
                    buffer = max_length[i]+8
                    for j in range(buffer):
                        sys.stdout.write(' ')


            # print a spacer when there is no task
            else:
                buffer = max_length[i]+8
                for j in range(buffer):
                    sys.stdout.write(' ')

        print "|"

    # bottom line
    for i in range(7):
        sys.stdout.write('+')

        total = max_length[i]+8


        for j in range(total):
            sys.stdout.write('-')

    print "+"


    # PRINT THE ANYTIME TASKS
    print ""
    print "Due Anytime: ",


    # get the max length of the anytime tasks
    max_task_length=0
    for j in range(len(anytime)):
            if len(anytime[j][2]) > max_task_length:
                max_task_length = len(anytime[j][2])


    # initial list heading
    current_list_name = ""

    # cycle through each task item
    for i in range(len(anytime)):

        # if the task item is in a new list...print the new list name
        if anytime[i][1] != current_list_name:
            current_list_name = anytime[i][1]

            print ""
            sys.stdout.write('  ' + current_list_name + ':')

            buffer = max_list_name - len(current_list_name)
            for k in range(buffer):
                sys.stdout.write(' ')


        # if task is completed...
        if anytime[i][3] != "":

            # print an 'x' instead of priority
            sys.stdout.write('     x  ')

        # for uncompleted tasks...
        else:

            # print the priority, if present, and the task in color, if desired
            if anytime[i][0] != "N":

                sys.stdout.write('    (' + anytime[i][0] + ') ')

            # indent non-prioritized tasks further
            else:
                sys.stdout.write('        ')

        # print the actual task
        sys.stdout.write(anytime[i][2].encode('utf-8'))
        buffer = max_task_length - len(anytime[i][2])
        for k in range(buffer):
                sys.stdout.write(' ')

    print ""

# END planner()
# ========================================================================================================= #



# ========================================================================================================= #
# status( msg )                                                                                             #
#     authentication progress bar                                                                           #
# ========================================================================================================= #
def status(msg):

    if DISP_STATUS == 1:

		if msg == None:
			sys.stdout.write("                                                            \r")
			sys.stdout.flush()
		else:
			sys.stdout.write(msg+"\r")
			sys.stdout.flush()

# END status()
# ========================================================================================================= #



# ========================================================================================================= #
# interactive()                                                                                             #
#     let the user enter commands in an interactive mode                                                    #
# ========================================================================================================= #
def interactive():
    global MODE
    MODE = "interactive"
    cmd = ""
    while (cmd != "exit"):
        cmd = raw_input('>> ')
        cmd = string.split(cmd)
        main(cmd, mode="interactive")
        genLookupTable()
# END give_input()
# ========================================================================================================= #



# ========================================================================================================= #
# help                                                                                                      #
#     print basic description of the program                                                                #
# ========================================================================================================= #
def help():

    # Get user credentials
    username = login()

    print "NAME"
    print "  rtm -- a command line interface for the Remember the Milk task manager"
    print "         see http://www.rememberthemilk.com/ for more information."
    print ""
    print "DESCRIPTION"
    print "  This program gives full command line access to a user's rtm tasks and "
    print "  can view, add and modify tasks.  The program utilizes the pyrtm Remember"
    print "  The Milk API interface for python.  Visit <https://bitbucket.org/srid/pyrtm/>"
    print "  for more information about the API interface."
    print ""
    version()
    print ""
    print "RTM USER INFORMATION"
    print "  Username: " + username
    print ""
    usage()

# END help()
# ========================================================================================================= #



# ========================================================================================================= #
# version                                                                                                   #
#     print author and version                                                                              #
# ========================================================================================================= #
def version():

    print "AUTHOR"
    print "  David Waring -- dave@davidwaring.net"
    print "  http://www.davidwaring.net/projects/rtm.html"
    print ""
    print "VERSION"
    print "  " + VERSION

# END version()
# ========================================================================================================= #



# ========================================================================================================= #
# usage                                                                                                     #
#     print the usage and define the options and commands                                                   #
# ========================================================================================================= #
def usage():

    print "USAGE"
    print "  rtm [options] ... [command] [command arguments]"
    print ""
    print "  Options:"
    print "    Note: To change the default display variables, edit the values in the beginning of this script"
    print ""
    print "    --comp, -c          : toggle the display of completed tasks - default", DISP_COMP
    print "    --help, -h          : display the help and usage"
    print "    --notes, -n         : toggle the display of notes indicators - default", DISP_NOTES
    print "    --plain, -p         : set output to plain (no color) - default", PLAIN
    print "    --status, -s        : toggle the display of status messages - default", DISP_STATUS
    print "    --tags, -t          : toggle the display of tags - default", DISP_TAGS
    print "    --usage, -u         : display the usage"
    print "    --version, -v       : display the author and version"
    print ""
    print "  Commands [arguments]:"
    print "    - Only 1 command can be used at a time"
    print "    - Leaving the command blank will start the interactive mode"
    print "    - Generally, leaving the arguments blank will allow the user to enter"
    print "      multiple arguments at a prompt (ie marking multiple tasks complete)."
    print ""
    print "    add [task]          : add a task using the following format::"
    print "      a [task]              task name due date p:priority l:list name t:tag"
    print "    addList [name]      : add a new list to RTM using the specified name"
    print "      al [name]"
    print "    addNote [index] [title] [body] : add a note to the specified task"
    print "      an [index] [title] [body]"
    print "    addTags [index] [tags] : add the given tags to the specified task"
    print "      at [index] [tags]"
    print "    comp [index]        : mark the task specified by its index number as complete"
    print "      c [index]"
    print "    delete [index]      : delete the task specified by its index number"
    print "      del [index]"
    print "      rm [index]"
    print "    delList [name]      : delete the list specified by its name"
    print "      dl [name]             (moves remaining tasks to the Inbox)"
    print "    delNote [index]     : delete a note from the specified task"
    print "      dn [index]"
    print "    delTags [index] [tags] : delete the given tags from the specified task"
    print "      dt [index] [tags]"
    print "    due [index] [date]  : set the due date of the task specified by its index number"
    print "    exit                : exit interactive mode"
    print "    help                : display this help information"
    print "    logout              : remove login credentials used by RTM-CLI"
    print "    ls [filter]         : list all tasks sorted first by list then priority"
    print "    lsd [filter]        : list all tasks sorted first by due date then priority"
    print "    lsp [filter]        : list all tasks sorted first by priority then list"
    print "        [filter]        : filter options based on RTM's advanced search filters, ie::"
    print "                            list:<task list>"
    print "                            priority:<priority>"
    print "                            tag:<tag>"
    print "                            status:<completed | incomplete>"
    print "                            due:<due date>"
    print "    move [index] [list] : move the task specified by its index number to the specified list"
    print "      mv [index] [list]"
    print "      m [index] [list]"
    print "    notes [index]       : display the notes for the task specified by its index number"
    print "    open [page]         : open RTM <page> (home by default) in a web browser"
    print "      o [page]              <page> = filters, help, home, planner, tasks, search, settings"
    print "    postpone [index]    : postpone the due date of the specified task by 1 day"
    print "      pp [index]"
    print "    pri [index] [pri]   : set the priority of task specified by its index number to <pri>,"
    print "      p [index] [pri]       where <pri> can be priorities 1,2,3 or 0 to remove priority"
    print "    renameList [old name] [new name] : change the name of a list from <old name> to <new name>"
    print "      mvList [old name] [new name]"
    print "    uncomp [index]      : uncomplete the task specified by its index number"
    print "      unc [index]           set the status of a previously completed task to incomplete"
    print "      inc [index]"
    print "    undo                : undo the last function"
    print ""
    print "  Meta-Commands:"
    print "    clear [filter]      : delete all completed tasks (that match the optional filter)"
    print "    planner [start] [filter] : print a weekly planner for tasks with due dates for this week"
    print "      week [start] [filter]      <start> = mon (default), sun or today"
    print "                               NOTE: this will print a very wide display and task names will"
    print "                                  be cut at 20 characters."
    print "    today               : display prioritized tasks and tasks completed today"

# END usage()
# ========================================================================================================= #



# ========================================================================================================= #
# main( argv )                                                                                              #
#     login in to RTM and process the command line arguments                                                #
# ========================================================================================================= #
def main(argv, mode=""):

    # PROCESS COMMAND LINE ARGUMENTS

    # define command line options
    try:
        opts, args = getopt.getopt(argv, "chnpstuv", ["comp", "help", "notes", "plain", "status", "tags", "usage", "version"])
    except getopt.GetoptError, err:
        print "ERROR: " + str(err)
        print ""
        usage()
        sys.exit(2)


    # Process options
    for opt, arg in opts:
        if opt in ("--comp", "-c"):
           global DISP_COMP
           DISP_COMP = abs(DISP_COMP-1)
        elif opt in ("--help", "-h"):
            help()
            sys.exit(0)
        elif opt in ("--notes", "-n"):
           global DISP_NOTES
           DISP_NOTES = abs(DISP_NOTES-1)
        elif opt in ("--plain", "-p"):
            global PLAIN
            PLAIN=1
        elif opt in ("--status", "-s"):
            global DISP_STATUS
            DISP_STATUS = abs(DISP_STATUS-1)
        elif opt in ("--tags", "-t"):
            global DISP_TAGS
            DISP_TAGS = abs(DISP_TAGS-1)
        elif opt in ("--usage", "-u"):
            usage()
            sys.exit(0)
        elif opt in ("--version", "-v"):
            version()
            sys.exit(0)


    # parse command from the command line arguments
    if len(args) == 0:
    	login()
        interactive()
    command = args[0]

    # Process commands (only one can be given at a time)
    if command == "ls":
        ls(filterString=" ".join(args[1:]))

    elif command == "lsp":
        lsp(filterString=" ".join(args[1:]))

    elif command == "lsd":
        lsd(filterString=" ".join(args[1:]))

    elif command in ("add", "a"):
        if len(args) == 1:
            madd()
        else:
            add(" ".join(args[1:]))

    elif command in ("addList", "addlist", "al", "aL"):
        if len(args) == 1:
            maddList()
        else:
            addList(" ".join(args[1:]))

    elif command in ("addTags", "addtags", "at", "aT"):
        if len(args) == 1:
            maddTags()
        else:
            addTags(args[1], ",".join(args[2:]))

    elif command in ("addNote", "addnote", "an", "aN"):
        if len(args) == 1:
            maddNote()
        else:
            addNote(args[1], args[2], " ".join(args[3:]))

    elif command in ("complete", "comp", "com", "c", "fin", "f"):
        if len(args) == 2:
            complete(args[1])
        else:
            mcomplete()

    elif command in ("delete", "dele", "del", "rm"):
        if len(args) == 2:
            delete(args[1])
        else:
            mdelete()

    elif command in ("delList", "dellist", "dl", "dL", "deleteList", "deletelist"):
        if len(args) == 1:
            mdelList()
        else:
            delList(" ".join(args[1:]))

    elif command in ("delTags", "deltags", "dt", "dT", "deletetags", "deleteTags"):
        if len(args) == 1:
            mdelTags()
        else:
            delTags(args[1], ",".join(args[2:]))

    elif command in ("delNote", "delnote", "dn", "dN", "deletenote", "deleteNote"):
        if len(args) == 1:
            delNote()
        if len(args) == 2:
            delNote(args[1])

    elif command in ("exit"):
        sys.exit(0)

    elif command in ("renameList", "renamelist", "rl", "rL", "mvList", "mvlist"):
        if len(args) == 1:
            mrenameList()
        else:
            renameList(args[1], args[2])

    elif command in ("priority", "pri", "p"):
        if len(args) == 3:
            setPriority(args[1], pri=args[2])
        else:
            msetPriority()

    elif command in ("move", "mv", "m"):
        if len(args) == 3:
            move(args[1], args[2])
        else:
            mmove()

    elif command in ("notes"):
         getNotes(args[1])

    elif command in ("due"):
        if len(args) == 3:
            setDueDate(args[1], due_date=args[2])
        else:
            msetDueDate()

    elif command in ("uncomplete", "uncomp", "unc", "uc", "incomplete", "incomp", "inc"):
        if len(args) == 2:
            uncomplete(args[1])
        else:
            muncomplete()

    elif command in ("postpone", "post", "pp"):
        if len(args) == 2:
            postpone(args[1])
        else:
            mpostpone()

    elif command == "undo":
        undo()

    elif command == "logout":
        logout()

    elif command in ("planner", "week"):
        if len(args) == 1:
            planner()
        elif len(args) == 2:
            planner(start=args[1])
        else:
            planner(start=args[1], filterString=" ".join(args[2:]))

    elif command in ("open", "o"):
        username = login()
        if len(args) == 2:
            if args[1] == "planner":
                print "opening the RTM planner..."
                webbrowser.open("http://www.rememberthemilk.com/printplanner/"+username, True, True)
            elif args[1] == "tasks":
                print "opening the RTM tasks page..."
                webbrowser.open("http://www.rememberthemilk.com/home/"+username+"/#section.tasks", True, True)
            elif args[1] == "settings":
                print "opening the RTM settings page..."
                webbrowser.open("http://www.rememberthemilk.com/home/"+username+"/#section.settings", True, True)
            elif args[1] == "help":
                print "opening the RTM help page..."
                webbrowser.open("http://www.rememberthemilk.com/help/", True, True)
            elif args[1] == "search":
                print "opening RTM advanced serach filters..."
                webbrowser.open("http://www.rememberthemilk.com/help/answers/search/advanced.rtm", True, True)
            elif args[1] == "filters":
                print "opening RTM advanced serach filters..."
                webbrowser.open("http://www.rememberthemilk.com/help/answers/search/advanced.rtm", True, True)
            else:
                print "opening RTM..."
                webbrowser.open("http://www.rememberthemilk.com/home/"+username, True, True)
        else:
            print "opening RTM..."
            webbrowser.open("http://www.rememberthemilk.com/home/"+username, True, True)

    elif command in ("clean", "clear"):
        clear(filterString=" ".join(args[1:]))

    elif command == "today":
        lsp(filterString="(not priority:none and status:incomplete) or completed:today or (due:today and status:incomplete)")

    elif command == "":
        usage()
        if MODE != "interactive":
            sys.exit(2)

    elif command == "help":
        help()

    elif command == "rtm":
        main(args[1:])

    else:
        print "ERROR: command " + command + " not recognized"
        usage()
        if MODE != "interactive":
            sys.exit(2)


# Call main with all args (excluding the command name)
if __name__ == "__main__":
    main(sys.argv[1:])


# END main()
# ========================================================================================================= #
